
uart_master_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b48  08005b48  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b50  08005b50  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08005bc0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005bc0  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e362  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ba  00000000  00000000  0002e43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087c  00000000  00000000  00031328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e64e  00000000  00000000  00031ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5de  00000000  00000000  000501f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b86ce  00000000  00000000  0005f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003550  00000000  00000000  00117ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a10 	.word	0x08005a10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005a10 	.word	0x08005a10

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_GPIO_Init+0x78>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <MX_GPIO_Init+0x78>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_GPIO_Init+0x78>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_GPIO_Init+0x78>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <MX_GPIO_Init+0x78>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_GPIO_Init+0x78>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x7c>)
 800060a:	f000 ff87 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_GPIO_Init+0x7c>)
 8000628:	f000 fdf6 	bl	8001218 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000642:	f000 fb86 	bl	8000d52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000646:	f000 f81f 	bl	8000688 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064a:	f7ff ffb7 	bl	80005bc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800064e:	f000 fa6b 	bl	8000b28 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000652:	f000 fa1d 	bl	8000a90 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	uartCommInit(&huart1);
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0x44>)
 8000658:	f000 f996 	bl	8000988 <uartCommInit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		rand_no=rand();
 800065c:	f004 f9e4 	bl	8004a28 <rand>
 8000660:	4603      	mov	r3, r0
 8000662:	607b      	str	r3, [r7, #4]
		// Assign values to master data
		assignMasterData(&masterData, 0x01, rand_no, 0x03);
 8000664:	2303      	movs	r3, #3
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	2101      	movs	r1, #1
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <main+0x48>)
 800066c:	f000 f99e 	bl	80009ac <assignMasterData>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Send master data over UART
		sendMasterData(&huart1, &masterData);
 8000670:	4904      	ldr	r1, [pc, #16]	; (8000684 <main+0x48>)
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <main+0x44>)
 8000674:	f000 f9b6 	bl	80009e4 <sendMasterData>
		HAL_Delay(100);
 8000678:	2064      	movs	r0, #100	; 0x64
 800067a:	f000 fbdb 	bl	8000e34 <HAL_Delay>
		rand_no=rand();
 800067e:	e7ed      	b.n	800065c <main+0x20>
 8000680:	200000fc 	.word	0x200000fc
 8000684:	200000c8 	.word	0x200000c8

08000688 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2238      	movs	r2, #56	; 0x38
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fb09 	bl	8004cae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 ff4e 	bl	800154c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80006ca:	2355      	movs	r3, #85	; 0x55
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ffe8 	bl	80016b4 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x66>
		Error_Handler();
 80006ea:	f000 f818 	bl	800071e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fae6 	bl	8001cd8 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x8e>
		Error_Handler();
 8000712:	f000 f804 	bl	800071e <Error_Handler>
	}
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000722:	b672      	cpsid	i
}
 8000724:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000726:	e7fe      	b.n	8000726 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	; 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	; 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800075e:	f000 ff99 	bl	8001694 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 fb1c 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USART1_IRQHandler+0x10>)
 80007ca:	f001 ff75 	bl	80026b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000fc 	.word	0x200000fc

080007d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return 1;
 80007dc:	2301      	movs	r3, #1
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <_kill>:

int _kill(int pid, int sig)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007f2:	f004 faab 	bl	8004d4c <__errno>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2216      	movs	r2, #22
 80007fa:	601a      	str	r2, [r3, #0]
  return -1;
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_exit>:

void _exit (int status)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ffe7 	bl	80007e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800081a:	e7fe      	b.n	800081a <_exit+0x12>

0800081c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800082e:	f3af 8000 	nop.w
 8000832:	4601      	mov	r1, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf0      	blt.n	800082e <_read+0x12>
  }

  return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e009      	b.n	800087c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf1      	blt.n	8000868 <_write+0x12>
  }
  return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	605a      	str	r2, [r3, #4]
  return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f004 fa10 	bl	8004d4c <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20008000 	.word	0x20008000
 8000958:	00000400 	.word	0x00000400
 800095c:	20000084 	.word	0x20000084
 8000960:	20000378 	.word	0x20000378

08000964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <uartCommInit>:
SlaveDatatypedef slaveData;




void uartCommInit(UART_HandleTypeDef *huart) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	// Initialize the UART receive interrupt
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxbuff, RX_BUFF_SIZE);
 8000990:	2220      	movs	r2, #32
 8000992:	4904      	ldr	r1, [pc, #16]	; (80009a4 <uartCommInit+0x1c>)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <uartCommInit+0x20>)
 8000996:	f003 ffa8 	bl	80048ea <HAL_UARTEx_ReceiveToIdle_IT>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a8 	.word	0x200000a8
 80009a8:	200000fc 	.word	0x200000fc

080009ac <assignMasterData>:

void assignMasterData(MasterDatatypedef *data, uint32_t id, uint32_t a,
		uint32_t b) {
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
	data->first_header = 0xABCD1234; // Example header value
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <assignMasterData+0x34>)
 80009be:	601a      	str	r2, [r3, #0]
	data->node_id = id;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	605a      	str	r2, [r3, #4]
	data->command_a = a;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	611a      	str	r2, [r3, #16]
	data->command_b = b;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	615a      	str	r2, [r3, #20]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	abcd1234 	.word	0xabcd1234

080009e4 <sendMasterData>:

void sendMasterData(UART_HandleTypeDef *huart, MasterDatatypedef *data) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	// Copy the master data to the transmission buffer
	memcpy(txbuff, data, sizeof(MasterDatatypedef));
 80009ee:	2218      	movs	r2, #24
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <sendMasterData+0x28>)
 80009f4:	f004 f9d7 	bl	8004da6 <memcpy>
	// Transmit the data over UART
	HAL_UART_Transmit_IT(huart, txbuff, sizeof(MasterDatatypedef));
 80009f8:	2218      	movs	r2, #24
 80009fa:	4904      	ldr	r1, [pc, #16]	; (8000a0c <sendMasterData+0x28>)
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f001 fdc7 	bl	8002590 <HAL_UART_Transmit_IT>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000088 	.word	0x20000088

08000a10 <HAL_UARTEx_RxEventCallback>:
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxbuff, RX_BUFF_SIZE);
    // Copy the received data to the slave data structure
	memcpy(data, rxbuff, sizeof(SlaveDatatypedef));
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART1) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_UARTEx_RxEventCallback+0x48>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d113      	bne.n	8000a4e <HAL_UARTEx_RxEventCallback+0x3e>

		masterData.feedbackCounter++;
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000a2e:	60d3      	str	r3, [r2, #12]
		// Handle the received data

		memcpy(&slaveData, rxbuff, sizeof(SlaveDatatypedef));
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_UARTEx_RxEventCallback+0x50>)
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_UARTEx_RxEventCallback+0x54>)
 8000a34:	4614      	mov	r4, r2
 8000a36:	461d      	mov	r5, r3
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		// Restart the UART receive interrupt
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxbuff, RX_BUFF_SIZE);
 8000a44:	2220      	movs	r2, #32
 8000a46:	4907      	ldr	r1, [pc, #28]	; (8000a64 <HAL_UARTEx_RxEventCallback+0x54>)
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <HAL_UARTEx_RxEventCallback+0x58>)
 8000a4a:	f003 ff4e 	bl	80048ea <HAL_UARTEx_ReceiveToIdle_IT>
	}

}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bdb0      	pop	{r4, r5, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	200000c8 	.word	0x200000c8
 8000a60:	200000e0 	.word	0x200000e0
 8000a64:	200000a8 	.word	0x200000a8
 8000a68:	200000fc 	.word	0x200000fc

08000a6c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	// Handle post-transmission actions if necessary
	masterData.broadcastCounter++;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_UART_TxCpltCallback+0x20>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_UART_TxCpltCallback+0x20>)
 8000a7c:	6093      	str	r3, [r2, #8]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200000c8 	.word	0x200000c8

08000a90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_USART1_UART_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000ada:	f001 fd09 	bl	80024f0 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f7ff fe1b 	bl	800071e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000aec:	f003 fe81 	bl	80047f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f7ff fe12 	bl	800071e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000afe:	f003 feb6 	bl	800486e <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f7ff fe09 	bl	800071e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_USART1_UART_Init+0x90>)
 8000b0e:	f003 fe37 	bl	8004780 <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f7ff fe01 	bl	800071e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000fc 	.word	0x200000fc
 8000b24:	40013800 	.word	0x40013800

08000b28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <MX_USART2_UART_Init+0x94>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b72:	f001 fcbd 	bl	80024f0 <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b7c:	f7ff fdcf 	bl	800071e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b84:	f003 fe35 	bl	80047f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8e:	f7ff fdc6 	bl	800071e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000b96:	f003 fe6a 	bl	800486e <HAL_UARTEx_SetRxFifoThreshold>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f7ff fdbd 	bl	800071e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_USART2_UART_Init+0x90>)
 8000ba6:	f003 fdeb 	bl	8004780 <HAL_UARTEx_DisableFifoMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f7ff fdb5 	bl	800071e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000190 	.word	0x20000190
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09c      	sub	sp, #112	; 0x70
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	2244      	movs	r2, #68	; 0x44
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 f864 	bl	8004cae <memset>
  if(uartHandle->Instance==USART1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_UART_MspInit+0x134>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d140      	bne.n	8000c72 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fa87 	bl	8002110 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c08:	f7ff fd89 	bl	800071e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c10:	4a39      	ldr	r2, [pc, #228]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c16:	6613      	str	r3, [r2, #96]	; 0x60
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c30:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fadc 	bl	8001218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2025      	movs	r0, #37	; 0x25
 8000c66:	f000 f9e2 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6a:	2025      	movs	r0, #37	; 0x25
 8000c6c:	f000 f9f9 	bl	8001062 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c70:	e03b      	b.n	8000cea <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_UART_MspInit+0x13c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d136      	bne.n	8000cea <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fa41 	bl	8002110 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000c94:	f7ff fd43 	bl	800071e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x138>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f000 fa97 	bl	8001218 <HAL_GPIO_Init>
}
 8000cea:	bf00      	nop
 8000cec:	3770      	adds	r7, #112	; 0x70
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40004400 	.word	0x40004400

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff fe2e 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f004 f813 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fc83 	bl	800063c <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   r0, =_estack
 8000d38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d44:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 8000d48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d4c:	20000374 	.word	0x20000374

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>

08000d52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f95b 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f80e 	bl	8000d84 <HAL_InitTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	e001      	b.n	8000d78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d74:	f7ff fcd8 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d78:	79fb      	ldrb	r3, [r7, #7]

}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_InitTick+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d022      	beq.n	8000dde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_InitTick+0x6c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_InitTick+0x68>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f966 	bl	800107e <HAL_SYSTICK_Config>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10f      	bne.n	8000dd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d809      	bhi.n	8000dd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc6:	f000 f932 	bl	800102e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_InitTick+0x70>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e007      	b.n	8000de2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e004      	b.n	8000de2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e001      	b.n	8000de2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x1c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_IncTick+0x20>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_IncTick+0x1c>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000224 	.word	0x20000224
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000224 	.word	0x20000224

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d004      	beq.n	8000e58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_Delay+0x40>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4413      	add	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e58:	bf00      	nop
 8000e5a:	f7ff ffdf 	bl	8000e1c <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d8f7      	bhi.n	8000e5a <HAL_Delay+0x26>
  {
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff40 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff33 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa4 	bl	8000fd4 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d005      	beq.n	80010ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2204      	movs	r2, #4
 80010b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e037      	b.n	800112a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 020e 	bic.w	r2, r2, #14
 80010c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f003 021f 	and.w	r2, r3, #31
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001106:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00c      	beq.n	800112a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800111e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001128:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d00d      	beq.n	800117c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2204      	movs	r2, #4
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e047      	b.n	800120c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 020e 	bic.w	r2, r2, #14
 800118a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f202 	lsl.w	r2, r1, r2
 80011be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00c      	beq.n	80011ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	4798      	blx	r3
    }
  }
  return status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001226:	e15a      	b.n	80014de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 814c 	beq.w	80014d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0203 	and.w	r2, r3, #3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 80a6 	beq.w	80014d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HAL_GPIO_Init+0x2e4>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <HAL_GPIO_Init+0x2e4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6613      	str	r3, [r2, #96]	; 0x60
 8001398:	4b58      	ldr	r3, [pc, #352]	; (80014fc <HAL_GPIO_Init+0x2e4>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a4:	4a56      	ldr	r2, [pc, #344]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ce:	d01f      	beq.n	8001410 <HAL_GPIO_Init+0x1f8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d019      	beq.n	800140c <HAL_GPIO_Init+0x1f4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d013      	beq.n	8001408 <HAL_GPIO_Init+0x1f0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x2f4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d00d      	beq.n	8001404 <HAL_GPIO_Init+0x1ec>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a49      	ldr	r2, [pc, #292]	; (8001510 <HAL_GPIO_Init+0x2f8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d007      	beq.n	8001400 <HAL_GPIO_Init+0x1e8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a48      	ldr	r2, [pc, #288]	; (8001514 <HAL_GPIO_Init+0x2fc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <HAL_GPIO_Init+0x1e4>
 80013f8:	2305      	movs	r3, #5
 80013fa:	e00a      	b.n	8001412 <HAL_GPIO_Init+0x1fa>
 80013fc:	2306      	movs	r3, #6
 80013fe:	e008      	b.n	8001412 <HAL_GPIO_Init+0x1fa>
 8001400:	2304      	movs	r3, #4
 8001402:	e006      	b.n	8001412 <HAL_GPIO_Init+0x1fa>
 8001404:	2303      	movs	r3, #3
 8001406:	e004      	b.n	8001412 <HAL_GPIO_Init+0x1fa>
 8001408:	2302      	movs	r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x1fa>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_GPIO_Init+0x1fa>
 8001410:	2300      	movs	r3, #0
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4093      	lsls	r3, r2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001422:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_GPIO_Init+0x300>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001454:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_GPIO_Init+0x300>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_GPIO_Init+0x300>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800147e:	4a26      	ldr	r2, [pc, #152]	; (8001518 <HAL_GPIO_Init+0x300>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_GPIO_Init+0x300>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <HAL_GPIO_Init+0x300>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_GPIO_Init+0x300>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <HAL_GPIO_Init+0x300>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f ae9d 	bne.w	8001228 <HAL_GPIO_Init+0x10>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	48000400 	.word	0x48000400
 8001508:	48000800 	.word	0x48000800
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48001000 	.word	0x48001000
 8001514:	48001400 	.word	0x48001400
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001538:	e002      	b.n	8001540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d141      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800155a:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001566:	d131      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001568:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156e:	4a46      	ldr	r2, [pc, #280]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001580:	4a41      	ldr	r2, [pc, #260]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2232      	movs	r2, #50	; 0x32
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a3f      	ldr	r2, [pc, #252]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159e:	e002      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d102      	bne.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f2      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d158      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e057      	b.n	800167c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015dc:	e04d      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e4:	d141      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d131      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fa:	4a23      	ldr	r2, [pc, #140]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160c:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2232      	movs	r2, #50	; 0x32
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162a:	e002      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d102      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d112      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e011      	b.n	800167c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001668:	e007      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001678:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40007000 	.word	0x40007000
 800168c:	20000000 	.word	0x20000000
 8001690:	431bde83 	.word	0x431bde83

08001694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	6093      	str	r3, [r2, #8]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e2fe      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d075      	beq.n	80017be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x3e>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_OscConfig+0x44>
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d10b      	bne.n	8001710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	4b8d      	ldr	r3, [pc, #564]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d05b      	beq.n	80017bc <HAL_RCC_OscConfig+0x108>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d157      	bne.n	80017bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e2d9      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x74>
 800171a:	4b85      	ldr	r3, [pc, #532]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a84      	ldr	r2, [pc, #528]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xb0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7e      	ldr	r2, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7b      	ldr	r2, [pc, #492]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xb0>
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a77      	ldr	r2, [pc, #476]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b75      	ldr	r3, [pc, #468]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a74      	ldr	r2, [pc, #464]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fb56 	bl	8000e1c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fb52 	bl	8000e1c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e29e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xc0>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb42 	bl	8000e1c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fb3e 	bl	8000e1c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e28a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	4b60      	ldr	r3, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0xe8>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d075      	beq.n	80018b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x136>
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_OscConfig+0x13c>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d11f      	bne.n	8001830 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x154>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e25d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b49      	ldr	r3, [pc, #292]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	4946      	ldr	r1, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800181c:	4b45      	ldr	r3, [pc, #276]	; (8001934 <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff faaf 	bl	8000d84 <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d043      	beq.n	80018b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e249      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d023      	beq.n	8001880 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001838:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff faea 	bl	8000e1c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fae6 	bl	8000e1c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e232      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	061b      	lsls	r3, r3, #24
 8001878:	492d      	ldr	r1, [pc, #180]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
 800187e:	e01a      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fac6 	bl	8000e1c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fac2 	bl	8000e1c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e20e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1e0>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d041      	beq.n	8001946 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01c      	beq.n	8001904 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fa9f 	bl	8000e1c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa9b 	bl	8000e1c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1e7      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ef      	beq.n	80018e2 <HAL_RCC_OscConfig+0x22e>
 8001902:	e020      	b.n	8001946 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_RCC_OscConfig+0x27c>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff fa82 	bl	8000e1c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191a:	e00d      	b.n	8001938 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fa7e 	bl	8000e1c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d906      	bls.n	8001938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1ca      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001938:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ea      	bne.n	800191c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80a6 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001958:	4b84      	ldr	r3, [pc, #528]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x2b4>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x2b6>
 8001968:	2300      	movs	r3, #0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b7f      	ldr	r3, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a7e      	ldr	r2, [pc, #504]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b7c      	ldr	r3, [pc, #496]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4b79      	ldr	r3, [pc, #484]	; (8001b70 <HAL_RCC_OscConfig+0x4bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001996:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <HAL_RCC_OscConfig+0x4bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a75      	ldr	r2, [pc, #468]	; (8001b70 <HAL_RCC_OscConfig+0x4bc>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fa3b 	bl	8000e1c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fa37 	bl	8000e1c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e183      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019bc:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <HAL_RCC_OscConfig+0x4bc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_RCC_OscConfig+0x32e>
 80019d0:	4b66      	ldr	r3, [pc, #408]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a65      	ldr	r2, [pc, #404]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e0:	e024      	b.n	8001a2c <HAL_RCC_OscConfig+0x378>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d110      	bne.n	8001a0c <HAL_RCC_OscConfig+0x358>
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f0:	4a5e      	ldr	r2, [pc, #376]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	4a5a      	ldr	r2, [pc, #360]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0a:	e00f      	b.n	8001a2c <HAL_RCC_OscConfig+0x378>
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d016      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f9f2 	bl	8000e1c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f9ee 	bl	8000e1c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e138      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ed      	beq.n	8001a3c <HAL_RCC_OscConfig+0x388>
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f9db 	bl	8000e1c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f9d7 	bl	8000e1c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e121      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ed      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d03c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01c      	beq.n	8001aee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f9aa 	bl	8000e1c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001acc:	f7ff f9a6 	bl	8000e1c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0f2      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ef      	beq.n	8001acc <HAL_RCC_OscConfig+0x418>
 8001aec:	e01b      	b.n	8001b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff f98d 	bl	8000e1c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b06:	f7ff f989 	bl	8000e1c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0d5      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80c9 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	f000 8083 	beq.w	8001c44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d15e      	bne.n	8001c04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_RCC_OscConfig+0x4b8>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f963 	bl	8000e1c <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	e00c      	b.n	8001b74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f95f 	bl	8000e1c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d905      	bls.n	8001b74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0ab      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ec      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4b52      	ldr	r3, [pc, #328]	; (8001cd0 <HAL_RCC_OscConfig+0x61c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6a11      	ldr	r1, [r2, #32]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b90:	3a01      	subs	r2, #1
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b9a:	0212      	lsls	r2, r2, #8
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ba2:	0852      	lsrs	r2, r2, #1
 8001ba4:	3a01      	subs	r2, #1
 8001ba6:	0552      	lsls	r2, r2, #21
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bae:	0852      	lsrs	r2, r2, #1
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	0652      	lsls	r2, r2, #25
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bba:	06d2      	lsls	r2, r2, #27
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4943      	ldr	r1, [pc, #268]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f91e 	bl	8000e1c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f91a 	bl	8000e1c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e066      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x530>
 8001c02:	e05e      	b.n	8001cc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f904 	bl	8000e1c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f900 	bl	8000e1c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e04c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4924      	ldr	r1, [pc, #144]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x620>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
 8001c42:	e03e      	b.n	8001cc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e039      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_OscConfig+0x618>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d12c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d123      	bne.n	8001cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11b      	bne.n	8001cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d113      	bne.n	8001cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	019f800c 	.word	0x019f800c
 8001cd4:	feeefffc 	.word	0xfeeefffc

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e11e      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b91      	ldr	r3, [pc, #580]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	498c      	ldr	r1, [pc, #560]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e106      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d073      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d129      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0f4      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d44:	f000 f99e 	bl	8002084 <RCC_GetSysClockFreqFromPLLSource>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a7c      	ldr	r2, [pc, #496]	; (8001f40 <HAL_RCC_ClockConfig+0x268>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d93f      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d52:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d033      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d12f      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d7a:	4a70      	ldr	r2, [pc, #448]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e024      	b.n	8001dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0c6      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0be      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001db0:	f000 f8ce 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4a61      	ldr	r2, [pc, #388]	; (8001f40 <HAL_RCC_ClockConfig+0x268>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d909      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc6:	4a5d      	ldr	r2, [pc, #372]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4957      	ldr	r1, [pc, #348]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de4:	f7ff f81a 	bl	8000e1c <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff f816 	bl	8000e1c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e095      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e44:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e4c:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4936      	ldr	r1, [pc, #216]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b80      	cmp	r3, #128	; 0x80
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d21d      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 020f 	bic.w	r2, r3, #15
 8001e90:	4929      	ldr	r1, [pc, #164]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e98:	f7fe ffc0 	bl	8000e1c <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7fe ffbc 	bl	8000e1c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e03b      	b.n	8001f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1ed      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4917      	ldr	r1, [pc, #92]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490f      	ldr	r1, [pc, #60]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f02:	f000 f825 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490c      	ldr	r1, [pc, #48]	; (8001f44 <HAL_RCC_ClockConfig+0x26c>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x270>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ff2c 	bl	8000d84 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	04c4b400 	.word	0x04c4b400
 8001f44:	08005a28 	.word	0x08005a28
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e047      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e03e      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d136      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	4a16      	ldr	r2, [pc, #88]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fae:	68d2      	ldr	r2, [r2, #12]
 8001fb0:	0a12      	lsrs	r2, r2, #8
 8001fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
      break;
 8001fbc:	e00c      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	0a12      	lsrs	r2, r2, #8
 8001fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0e5b      	lsrs	r3, r3, #25
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e001      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ff8:	693b      	ldr	r3, [r7, #16]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200

08002014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_RCC_GetHCLKFreq+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002030:	f7ff fff0 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08005a38 	.word	0x08005a38

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800205c:	f7ff ffda 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4904      	ldr	r1, [pc, #16]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	08005a38 	.word	0x08005a38

08002084 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3301      	adds	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d10c      	bne.n	80020c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b2:	68d2      	ldr	r2, [r2, #12]
 80020b4:	0a12      	lsrs	r2, r2, #8
 80020b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
    break;
 80020c0:	e00c      	b.n	80020dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020cc:	68d2      	ldr	r2, [r2, #12]
 80020ce:	0a12      	lsrs	r2, r2, #8
 80020d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    break;
 80020da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0e5b      	lsrs	r3, r3, #25
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	3301      	adds	r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	00f42400 	.word	0x00f42400

08002110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002118:	2300      	movs	r3, #0
 800211a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800211c:	2300      	movs	r3, #0
 800211e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8098 	beq.w	800225e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a3f      	ldr	r2, [pc, #252]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800215a:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a39      	ldr	r2, [pc, #228]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002166:	f7fe fe59 	bl	8000e1c <HAL_GetTick>
 800216a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800216c:	e009      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7fe fe55 	bl	8000e1c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d902      	bls.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	74fb      	strb	r3, [r7, #19]
        break;
 8002180:	e005      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ef      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d159      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01e      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d019      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7fe fe15 	bl	8000e1c <HAL_GetTick>
 80021f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f4:	e00b      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fe11 	bl	8000e1c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d902      	bls.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	74fb      	strb	r3, [r7, #19]
            break;
 800220c:	e006      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ec      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4903      	ldr	r1, [pc, #12]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002238:	e008      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	74bb      	strb	r3, [r7, #18]
 800223e:	e005      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800224c:	7c7b      	ldrb	r3, [r7, #17]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4ba6      	ldr	r3, [pc, #664]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4aa5      	ldr	r2, [pc, #660]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800226a:	4ba0      	ldr	r3, [pc, #640]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 0203 	bic.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	499c      	ldr	r1, [pc, #624]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800228c:	4b97      	ldr	r3, [pc, #604]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 020c 	bic.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4994      	ldr	r1, [pc, #592]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ae:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	498b      	ldr	r1, [pc, #556]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022d0:	4b86      	ldr	r3, [pc, #536]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	4983      	ldr	r1, [pc, #524]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f2:	4b7e      	ldr	r3, [pc, #504]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	497a      	ldr	r1, [pc, #488]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4972      	ldr	r1, [pc, #456]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4969      	ldr	r1, [pc, #420]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4961      	ldr	r1, [pc, #388]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	4958      	ldr	r1, [pc, #352]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	4950      	ldr	r1, [pc, #320]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	4942      	ldr	r1, [pc, #264]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a3c      	ldr	r2, [pc, #240]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800240c:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4934      	ldr	r1, [pc, #208]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	4926      	ldr	r1, [pc, #152]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	4918      	ldr	r1, [pc, #96]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e042      	b.n	8002588 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe fb53 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2224      	movs	r2, #36	; 0x24
 800251e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fec0 	bl	80032c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fbf1 	bl	8002d28 <UART_SetConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e01b      	b.n	8002588 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800255e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800256e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 ff3f 	bl	8003404 <UART_CheckIdleState>
 8002586:	4603      	mov	r3, r0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002590:	b480      	push	{r7}
 8002592:	b091      	sub	sp, #68	; 0x44
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d178      	bne.n	800269a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_UART_Transmit_IT+0x24>
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e071      	b.n	800269c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2221      	movs	r2, #33	; 0x21
 80025e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ec:	d12a      	bne.n	8002644 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f6:	d107      	bne.n	8002608 <HAL_UART_Transmit_IT+0x78>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_UART_Transmit_IT+0x118>)
 8002604:	679a      	str	r2, [r3, #120]	; 0x78
 8002606:	e002      	b.n	800260e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_UART_Transmit_IT+0x11c>)
 800260c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3308      	adds	r3, #8
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3308      	adds	r3, #8
 800262c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800262e:	637a      	str	r2, [r7, #52]	; 0x34
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e5      	bne.n	800260e <HAL_UART_Transmit_IT+0x7e>
 8002642:	e028      	b.n	8002696 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264c:	d107      	bne.n	800265e <HAL_UART_Transmit_IT+0xce>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_UART_Transmit_IT+0x120>)
 800265a:	679a      	str	r2, [r3, #120]	; 0x78
 800265c:	e002      	b.n	8002664 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <HAL_UART_Transmit_IT+0x124>)
 8002662:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	613b      	str	r3, [r7, #16]
   return(result);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	69f9      	ldr	r1, [r7, #28]
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e6      	bne.n	8002664 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
  }
}
 800269c:	4618      	mov	r0, r3
 800269e:	3744      	adds	r7, #68	; 0x44
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	08003bcb 	.word	0x08003bcb
 80026ac:	08003aeb 	.word	0x08003aeb
 80026b0:	08003a29 	.word	0x08003a29
 80026b4:	08003971 	.word	0x08003971

080026b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0ba      	sub	sp, #232	; 0xe8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80026e6:	4013      	ands	r3, r2
 80026e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11b      	bne.n	800272c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800270c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 82e3 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
      }
      return;
 800272a:	e2dd      	b.n	8002ce8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800272c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8123 	beq.w	800297c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002736:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800273a:	4b8d      	ldr	r3, [pc, #564]	; (8002970 <HAL_UART_IRQHandler+0x2b8>)
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002746:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_UART_IRQHandler+0x2bc>)
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8116 	beq.w	800297c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d011      	beq.n	8002780 <HAL_UART_IRQHandler+0xc8>
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d011      	beq.n	80027b0 <HAL_UART_IRQHandler+0xf8>
 800278c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2202      	movs	r2, #2
 800279e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f043 0204 	orr.w	r2, r3, #4
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d011      	beq.n	80027e0 <HAL_UART_IRQHandler+0x128>
 80027bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2204      	movs	r2, #4
 80027ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d017      	beq.n	800281c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80027fc:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_UART_IRQHandler+0x2b8>)
 80027fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2208      	movs	r2, #8
 800280a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f043 0208 	orr.w	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800281c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_UART_IRQHandler+0x196>
 8002828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800282c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8249 	beq.w	8002cec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d054      	beq.n	800295c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 ffe0 	bl	8003878 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d146      	bne.n	8002954 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3308      	adds	r3, #8
 80028cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3308      	adds	r3, #8
 80028ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800290a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1d9      	bne.n	80028c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d017      	beq.n	800294c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_UART_IRQHandler+0x2c0>)
 8002924:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fc0b 	bl	8001148 <HAL_DMA_Abort_IT>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d019      	beq.n	800296c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002946:	4610      	mov	r0, r2
 8002948:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294a:	e00f      	b.n	800296c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f9e1 	bl	8002d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002952:	e00b      	b.n	800296c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f9dd 	bl	8002d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295a:	e007      	b.n	800296c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f9d9 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800296a:	e1bf      	b.n	8002cec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	bf00      	nop
    return;
 800296e:	e1bd      	b.n	8002cec <HAL_UART_IRQHandler+0x634>
 8002970:	10000001 	.word	0x10000001
 8002974:	04000120 	.word	0x04000120
 8002978:	08003945 	.word	0x08003945

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 8153 	bne.w	8002c2c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 814c 	beq.w	8002c2c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8145 	beq.w	8002c2c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	f040 80bb 	bne.w	8002b30 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 818f 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80029d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029dc:	429a      	cmp	r2, r3
 80029de:	f080 8187 	bcs.w	8002cf0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 8087 	bne.w	8002b0e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1da      	bne.n	8002a00 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e1      	bne.n	8002a4a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e3      	bne.n	8002a86 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002adc:	f023 0310 	bic.w	r3, r3, #16
 8002ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8002af0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e4      	bne.n	8002acc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fac4 	bl	8001096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7fd ff71 	bl	8000a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b2e:	e0df      	b.n	8002cf0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80d1 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80cc 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e4      	bne.n	8002b5c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3308      	adds	r3, #8
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bba:	633a      	str	r2, [r7, #48]	; 0x30
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e1      	bne.n	8002b92 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0310 	bic.w	r3, r3, #16
 8002bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	69b9      	ldr	r1, [r7, #24]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	617b      	str	r3, [r7, #20]
   return(result);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e4      	bne.n	8002be2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fd fef3 	bl	8000a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c2a:	e063      	b.n	8002cf4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <HAL_UART_IRQHandler+0x59e>
 8002c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f001 fd78 	bl	8004744 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c54:	e051      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d014      	beq.n	8002c8c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d03a      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
    }
    return;
 8002c8a:	e035      	b.n	8002cf8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <HAL_UART_IRQHandler+0x5f4>
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 f805 	bl	8003cb4 <UART_EndTransmit_IT>
    return;
 8002caa:	e026      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_UART_IRQHandler+0x614>
 8002cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f001 fd51 	bl	800476c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cca:	e016      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_UART_IRQHandler+0x642>
 8002cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0c      	bge.n	8002cfa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f001 fd39 	bl	8004758 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ce6:	e008      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
      return;
 8002ce8:	bf00      	nop
 8002cea:	e006      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
    return;
 8002cec:	bf00      	nop
 8002cee:	e004      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
      return;
 8002cf0:	bf00      	nop
 8002cf2:	e002      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
      return;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_IRQHandler+0x642>
    return;
 8002cf8:	bf00      	nop
  }
}
 8002cfa:	37e8      	adds	r7, #232	; 0xe8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b08c      	sub	sp, #48	; 0x30
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4bab      	ldr	r3, [pc, #684]	; (8003004 <UART_SetConfig+0x2dc>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4aa0      	ldr	r2, [pc, #640]	; (8003008 <UART_SetConfig+0x2e0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d90:	4313      	orrs	r3, r2
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	f023 010f 	bic.w	r1, r3, #15
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a91      	ldr	r2, [pc, #580]	; (800300c <UART_SetConfig+0x2e4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d125      	bne.n	8002e18 <UART_SetConfig+0xf0>
 8002dcc:	4b90      	ldr	r3, [pc, #576]	; (8003010 <UART_SetConfig+0x2e8>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d81a      	bhi.n	8002e10 <UART_SetConfig+0xe8>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <UART_SetConfig+0xb8>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002e01 	.word	0x08002e01
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002e09 	.word	0x08002e09
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df6:	e0d6      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dfe:	e0d2      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e00:	2304      	movs	r3, #4
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e06:	e0ce      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e08:	2308      	movs	r3, #8
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e0e:	e0ca      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e10:	2310      	movs	r3, #16
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e16:	e0c6      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a7d      	ldr	r2, [pc, #500]	; (8003014 <UART_SetConfig+0x2ec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d138      	bne.n	8002e94 <UART_SetConfig+0x16c>
 8002e22:	4b7b      	ldr	r3, [pc, #492]	; (8003010 <UART_SetConfig+0x2e8>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d82d      	bhi.n	8002e8c <UART_SetConfig+0x164>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <UART_SetConfig+0x110>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e6d 	.word	0x08002e6d
 8002e3c:	08002e8d 	.word	0x08002e8d
 8002e40:	08002e8d 	.word	0x08002e8d
 8002e44:	08002e8d 	.word	0x08002e8d
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e8d 	.word	0x08002e8d
 8002e50:	08002e8d 	.word	0x08002e8d
 8002e54:	08002e8d 	.word	0x08002e8d
 8002e58:	08002e75 	.word	0x08002e75
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08002e8d 	.word	0x08002e8d
 8002e68:	08002e85 	.word	0x08002e85
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e72:	e098      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7a:	e094      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e82:	e090      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e84:	2308      	movs	r3, #8
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8a:	e08c      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e92:	e088      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <UART_SetConfig+0x2f0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d125      	bne.n	8002eea <UART_SetConfig+0x1c2>
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <UART_SetConfig+0x2e8>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ea8:	2b30      	cmp	r3, #48	; 0x30
 8002eaa:	d016      	beq.n	8002eda <UART_SetConfig+0x1b2>
 8002eac:	2b30      	cmp	r3, #48	; 0x30
 8002eae:	d818      	bhi.n	8002ee2 <UART_SetConfig+0x1ba>
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d00a      	beq.n	8002eca <UART_SetConfig+0x1a2>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d814      	bhi.n	8002ee2 <UART_SetConfig+0x1ba>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <UART_SetConfig+0x19a>
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d008      	beq.n	8002ed2 <UART_SetConfig+0x1aa>
 8002ec0:	e00f      	b.n	8002ee2 <UART_SetConfig+0x1ba>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec8:	e06d      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ed0:	e069      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ed8:	e065      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002eda:	2308      	movs	r3, #8
 8002edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ee0:	e061      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ee8:	e05d      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4b      	ldr	r2, [pc, #300]	; (800301c <UART_SetConfig+0x2f4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d125      	bne.n	8002f40 <UART_SetConfig+0x218>
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <UART_SetConfig+0x2e8>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002efe:	2bc0      	cmp	r3, #192	; 0xc0
 8002f00:	d016      	beq.n	8002f30 <UART_SetConfig+0x208>
 8002f02:	2bc0      	cmp	r3, #192	; 0xc0
 8002f04:	d818      	bhi.n	8002f38 <UART_SetConfig+0x210>
 8002f06:	2b80      	cmp	r3, #128	; 0x80
 8002f08:	d00a      	beq.n	8002f20 <UART_SetConfig+0x1f8>
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d814      	bhi.n	8002f38 <UART_SetConfig+0x210>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <UART_SetConfig+0x1f0>
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d008      	beq.n	8002f28 <UART_SetConfig+0x200>
 8002f16:	e00f      	b.n	8002f38 <UART_SetConfig+0x210>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f1e:	e042      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f20:	2302      	movs	r3, #2
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f26:	e03e      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f2e:	e03a      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f30:	2308      	movs	r3, #8
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f36:	e036      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f3e:	e032      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a30      	ldr	r2, [pc, #192]	; (8003008 <UART_SetConfig+0x2e0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12a      	bne.n	8002fa0 <UART_SetConfig+0x278>
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <UART_SetConfig+0x2e8>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f58:	d01a      	beq.n	8002f90 <UART_SetConfig+0x268>
 8002f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f5e:	d81b      	bhi.n	8002f98 <UART_SetConfig+0x270>
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d00c      	beq.n	8002f80 <UART_SetConfig+0x258>
 8002f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6a:	d815      	bhi.n	8002f98 <UART_SetConfig+0x270>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <UART_SetConfig+0x250>
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f74:	d008      	beq.n	8002f88 <UART_SetConfig+0x260>
 8002f76:	e00f      	b.n	8002f98 <UART_SetConfig+0x270>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7e:	e012      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f86:	e00e      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f8e:	e00a      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f90:	2308      	movs	r3, #8
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f96:	e006      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9e:	e002      	b.n	8002fa6 <UART_SetConfig+0x27e>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <UART_SetConfig+0x2e0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	f040 80a8 	bne.w	8003102 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d834      	bhi.n	8003024 <UART_SetConfig+0x2fc>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0x298>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fe5 	.word	0x08002fe5
 8002fc4:	08003025 	.word	0x08003025
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	08003025 	.word	0x08003025
 8002fd0:	08002ff3 	.word	0x08002ff3
 8002fd4:	08003025 	.word	0x08003025
 8002fd8:	08003025 	.word	0x08003025
 8002fdc:	08003025 	.word	0x08003025
 8002fe0:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7ff f822 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8002fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fea:	e021      	b.n	8003030 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <UART_SetConfig+0x2f8>)
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ff0:	e01e      	b.n	8003030 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe ffad 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ff8:	e01a      	b.n	8003030 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003000:	e016      	b.n	8003030 <UART_SetConfig+0x308>
 8003002:	bf00      	nop
 8003004:	cfff69f3 	.word	0xcfff69f3
 8003008:	40008000 	.word	0x40008000
 800300c:	40013800 	.word	0x40013800
 8003010:	40021000 	.word	0x40021000
 8003014:	40004400 	.word	0x40004400
 8003018:	40004800 	.word	0x40004800
 800301c:	40004c00 	.word	0x40004c00
 8003020:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800302e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 812a 	beq.w	800328c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	4a9e      	ldr	r2, [pc, #632]	; (80032b8 <UART_SetConfig+0x590>)
 800303e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003042:	461a      	mov	r2, r3
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	fbb3 f3f2 	udiv	r3, r3, r2
 800304a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d305      	bcc.n	8003068 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	429a      	cmp	r2, r3
 8003066:	d903      	bls.n	8003070 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800306e:	e10d      	b.n	800328c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	2200      	movs	r2, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	4a8e      	ldr	r2, [pc, #568]	; (80032b8 <UART_SetConfig+0x590>)
 800307e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003082:	b29b      	uxth	r3, r3
 8003084:	2200      	movs	r2, #0
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800308e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003092:	f7fd f915 	bl	80002c0 <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	020b      	lsls	r3, r1, #8
 80030a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030ac:	0202      	lsls	r2, r0, #8
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	6849      	ldr	r1, [r1, #4]
 80030b2:	0849      	lsrs	r1, r1, #1
 80030b4:	2000      	movs	r0, #0
 80030b6:	460c      	mov	r4, r1
 80030b8:	4605      	mov	r5, r0
 80030ba:	eb12 0804 	adds.w	r8, r2, r4
 80030be:	eb43 0905 	adc.w	r9, r3, r5
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	469a      	mov	sl, r3
 80030ca:	4693      	mov	fp, r2
 80030cc:	4652      	mov	r2, sl
 80030ce:	465b      	mov	r3, fp
 80030d0:	4640      	mov	r0, r8
 80030d2:	4649      	mov	r1, r9
 80030d4:	f7fd f8f4 	bl	80002c0 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e6:	d308      	bcc.n	80030fa <UART_SetConfig+0x3d2>
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d204      	bcs.n	80030fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e0c8      	b.n	800328c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003100:	e0c4      	b.n	800328c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310a:	d167      	bne.n	80031dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800310c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003110:	2b08      	cmp	r3, #8
 8003112:	d828      	bhi.n	8003166 <UART_SetConfig+0x43e>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x3f4>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003141 	.word	0x08003141
 8003120:	08003149 	.word	0x08003149
 8003124:	08003151 	.word	0x08003151
 8003128:	08003167 	.word	0x08003167
 800312c:	08003157 	.word	0x08003157
 8003130:	08003167 	.word	0x08003167
 8003134:	08003167 	.word	0x08003167
 8003138:	08003167 	.word	0x08003167
 800313c:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7fe ff74 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003146:	e014      	b.n	8003172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7fe ff86 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800314e:	e010      	b.n	8003172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <UART_SetConfig+0x594>)
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003154:	e00d      	b.n	8003172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7fe fefb 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800315a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800315c:	e009      	b.n	8003172 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003164:	e005      	b.n	8003172 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8089 	beq.w	800328c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <UART_SetConfig+0x590>)
 8003180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003184:	461a      	mov	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	fbb3 f3f2 	udiv	r3, r3, r2
 800318c:	005a      	lsls	r2, r3, #1
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	441a      	add	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	d916      	bls.n	80031d4 <UART_SetConfig+0x4ac>
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d212      	bcs.n	80031d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f023 030f 	bic.w	r3, r3, #15
 80031b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	8bfb      	ldrh	r3, [r7, #30]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	8bfa      	ldrh	r2, [r7, #30]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e05b      	b.n	800328c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031da:	e057      	b.n	800328c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d828      	bhi.n	8003236 <UART_SetConfig+0x50e>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x4c4>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7fe ff0c 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003216:	e014      	b.n	8003242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7fe ff1e 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 800321c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800321e:	e010      	b.n	8003242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <UART_SetConfig+0x594>)
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003224:	e00d      	b.n	8003242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fe93 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800322c:	e009      	b.n	8003242 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003234:	e005      	b.n	8003242 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003240:	bf00      	nop
    }

    if (pclk != 0U)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d021      	beq.n	800328c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <UART_SetConfig+0x590>)
 800324e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003252:	461a      	mov	r2, r3
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	fbb3 f2f2 	udiv	r2, r3, r2
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	441a      	add	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d909      	bls.n	8003286 <UART_SetConfig+0x55e>
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d205      	bcs.n	8003286 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	b29a      	uxth	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	e002      	b.n	800328c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2201      	movs	r2, #1
 8003290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2201      	movs	r2, #1
 8003298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80032a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3730      	adds	r7, #48	; 0x30
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	08005a40 	.word	0x08005a40
 80032bc:	00f42400 	.word	0x00f42400

080032c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01a      	beq.n	80033d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033be:	d10a      	bne.n	80033d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b098      	sub	sp, #96	; 0x60
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003414:	f7fd fd02 	bl	8000e1c <HAL_GetTick>
 8003418:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d12f      	bne.n	8003488 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f88e 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d022      	beq.n	8003488 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
 8003462:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e6      	bne.n	8003442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e063      	b.n	8003550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d149      	bne.n	800352a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003496:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f857 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03c      	beq.n	800352a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	623b      	str	r3, [r7, #32]
   return(result);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
 80034d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e6      	bne.n	80034b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3308      	adds	r3, #8
 80034e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3308      	adds	r3, #8
 8003500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003502:	61fa      	str	r2, [r7, #28]
 8003504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	617b      	str	r3, [r7, #20]
   return(result);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e012      	b.n	8003550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3758      	adds	r7, #88	; 0x58
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	e04f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d04b      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fd fc53 	bl	8000e1c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <UART_WaitOnFlagUntilTimeout+0x30>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e04e      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d037      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d034      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d031      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d110      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f95b 	bl	8003878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2208      	movs	r2, #8
 80035c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e029      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e4:	d111      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f941 	bl	8003878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d0a0      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003634:	b480      	push	{r7}
 8003636:	b0a3      	sub	sp, #140	; 0x8c
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003666:	d10e      	bne.n	8003686 <UART_Start_Receive_IT+0x52>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <UART_Start_Receive_IT+0x48>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800367a:	e02d      	b.n	80036d8 <UART_Start_Receive_IT+0xa4>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003684:	e028      	b.n	80036d8 <UART_Start_Receive_IT+0xa4>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <UART_Start_Receive_IT+0x76>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <UART_Start_Receive_IT+0x6c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800369e:	e01b      	b.n	80036d8 <UART_Start_Receive_IT+0xa4>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	227f      	movs	r2, #127	; 0x7f
 80036a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036a8:	e016      	b.n	80036d8 <UART_Start_Receive_IT+0xa4>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b2:	d10d      	bne.n	80036d0 <UART_Start_Receive_IT+0x9c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <UART_Start_Receive_IT+0x92>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	227f      	movs	r2, #127	; 0x7f
 80036c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036c4:	e008      	b.n	80036d8 <UART_Start_Receive_IT+0xa4>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	223f      	movs	r2, #63	; 0x3f
 80036ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036ce:	e003      	b.n	80036d8 <UART_Start_Receive_IT+0xa4>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2222      	movs	r2, #34	; 0x22
 80036e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80036f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3308      	adds	r3, #8
 8003708:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800370c:	673a      	str	r2, [r7, #112]	; 0x70
 800370e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003712:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800371a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e3      	bne.n	80036e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003728:	d14f      	bne.n	80037ca <UART_Start_Receive_IT+0x196>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	429a      	cmp	r2, r3
 8003734:	d349      	bcc.n	80037ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d107      	bne.n	8003750 <UART_Start_Receive_IT+0x11c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a47      	ldr	r2, [pc, #284]	; (8003868 <UART_Start_Receive_IT+0x234>)
 800374c:	675a      	str	r2, [r3, #116]	; 0x74
 800374e:	e002      	b.n	8003756 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a46      	ldr	r2, [pc, #280]	; (800386c <UART_Start_Receive_IT+0x238>)
 8003754:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01a      	beq.n	8003794 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003782:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003786:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e4      	bne.n	800375e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_Start_Receive_IT+0x160>
 80037c8:	e046      	b.n	8003858 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d107      	bne.n	80037e4 <UART_Start_Receive_IT+0x1b0>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <UART_Start_Receive_IT+0x23c>)
 80037e0:	675a      	str	r2, [r3, #116]	; 0x74
 80037e2:	e002      	b.n	80037ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a23      	ldr	r2, [pc, #140]	; (8003874 <UART_Start_Receive_IT+0x240>)
 80037e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d019      	beq.n	8003826 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003806:	677b      	str	r3, [r7, #116]	; 0x74
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e6      	bne.n	80037f2 <UART_Start_Receive_IT+0x1be>
 8003824:	e018      	b.n	8003858 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	613b      	str	r3, [r7, #16]
   return(result);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f043 0320 	orr.w	r3, r3, #32
 800383a:	67bb      	str	r3, [r7, #120]	; 0x78
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	69f9      	ldr	r1, [r7, #28]
 800384a:	6a3a      	ldr	r2, [r7, #32]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	61bb      	str	r3, [r7, #24]
   return(result);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	378c      	adds	r7, #140	; 0x8c
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	080043dd 	.word	0x080043dd
 800386c:	0800407d 	.word	0x0800407d
 8003870:	08003ec5 	.word	0x08003ec5
 8003874:	08003d0d 	.word	0x08003d0d

08003878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b095      	sub	sp, #84	; 0x54
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389e:	643b      	str	r3, [r7, #64]	; 0x40
 80038a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e6      	bne.n	8003880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3308      	adds	r3, #8
 80038b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e3      	bne.n	80038b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d118      	bne.n	8003924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e6      	bne.n	80038f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003938:	bf00      	nop
 800393a:	3754      	adds	r7, #84	; 0x54
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff f9d6 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b08f      	sub	sp, #60	; 0x3c
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	2b21      	cmp	r3, #33	; 0x21
 8003980:	d14c      	bne.n	8003a1c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d132      	bne.n	80039f4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	61fb      	str	r3, [r7, #28]
   return(result);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	613b      	str	r3, [r7, #16]
   return(result);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80039f2:	e013      	b.n	8003a1c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003a1c:	bf00      	nop
 8003a1e:	373c      	adds	r7, #60	; 0x3c
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b091      	sub	sp, #68	; 0x44
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	2b21      	cmp	r3, #33	; 0x21
 8003a38:	d151      	bne.n	8003ade <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d132      	bne.n	8003aac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	623b      	str	r3, [r7, #32]
   return(result);
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
 8003a66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e6      	bne.n	8003a46 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e6      	bne.n	8003a78 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003aaa:	e018      	b.n	8003ade <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003ade:	bf00      	nop
 8003ae0:	3744      	adds	r7, #68	; 0x44
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b091      	sub	sp, #68	; 0x44
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	2b21      	cmp	r3, #33	; 0x21
 8003afa:	d160      	bne.n	8003bbe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b02:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003b04:	e057      	b.n	8003bb6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d133      	bne.n	8003b7a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	623b      	str	r3, [r7, #32]
   return(result);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b32:	633a      	str	r2, [r7, #48]	; 0x30
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	617b      	str	r3, [r7, #20]
   return(result);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003b78:	e021      	b.n	8003bbe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003bb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003bb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1a4      	bne.n	8003b06 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003bbc:	e7ff      	b.n	8003bbe <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003bbe:	bf00      	nop
 8003bc0:	3744      	adds	r7, #68	; 0x44
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b091      	sub	sp, #68	; 0x44
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	2b21      	cmp	r3, #33	; 0x21
 8003bda:	d165      	bne.n	8003ca8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003be2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003be4:	e05c      	b.n	8003ca0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d133      	bne.n	8003c5a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	613b      	str	r3, [r7, #16]
   return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003c58:	e026      	b.n	8003ca8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d018      	beq.n	8003c9a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ca0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d19f      	bne.n	8003be6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003ca6:	e7ff      	b.n	8003ca8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003ca8:	bf00      	nop
 8003caa:	3744      	adds	r7, #68	; 0x44
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6979      	ldr	r1, [r7, #20]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e6      	bne.n	8003cbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fc feb5 	bl	8000a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d02:	bf00      	nop
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b09c      	sub	sp, #112	; 0x70
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d24:	2b22      	cmp	r3, #34	; 0x22
 8003d26:	f040 80be 	bne.w	8003ea6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d38:	b2d9      	uxtb	r1, r3
 8003d3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	400a      	ands	r2, r1
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 80a1 	bne.w	8003eb6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a33      	ldr	r2, [pc, #204]	; (8003ec0 <UART_RxISR_8BIT+0x1b4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01f      	beq.n	8003e38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	623b      	str	r3, [r7, #32]
   return(result);
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d12e      	bne.n	8003e9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	617b      	str	r3, [r7, #20]
   return(result);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e6      	bne.n	8003e46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d103      	bne.n	8003e8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fdba 	bl	8000a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e9c:	e00b      	b.n	8003eb6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe ff2e 	bl	8002d00 <HAL_UART_RxCpltCallback>
}
 8003ea4:	e007      	b.n	8003eb6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	619a      	str	r2, [r3, #24]
}
 8003eb6:	bf00      	nop
 8003eb8:	3770      	adds	r7, #112	; 0x70
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40008000 	.word	0x40008000

08003ec4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b09c      	sub	sp, #112	; 0x70
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ed2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003edc:	2b22      	cmp	r3, #34	; 0x22
 8003ede:	f040 80be 	bne.w	800405e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ef2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003ef6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003efa:	4013      	ands	r3, r2
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80a1 	bne.w	800406e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f40:	667b      	str	r3, [r7, #100]	; 0x64
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	663b      	str	r3, [r7, #96]	; 0x60
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f7e:	643a      	str	r2, [r7, #64]	; 0x40
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a33      	ldr	r2, [pc, #204]	; (8004078 <UART_RxISR_16BIT+0x1b4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01f      	beq.n	8003ff0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d018      	beq.n	8003ff0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e6      	bne.n	8003fbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d12e      	bne.n	8004056 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	60bb      	str	r3, [r7, #8]
   return(result);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f023 0310 	bic.w	r3, r3, #16
 8004012:	65bb      	str	r3, [r7, #88]	; 0x58
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6979      	ldr	r1, [r7, #20]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	613b      	str	r3, [r7, #16]
   return(result);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e6      	bne.n	8003ffe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d103      	bne.n	8004046 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2210      	movs	r2, #16
 8004044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fcde 	bl	8000a10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004054:	e00b      	b.n	800406e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fe fe52 	bl	8002d00 <HAL_UART_RxCpltCallback>
}
 800405c:	e007      	b.n	800406e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0208 	orr.w	r2, r2, #8
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	3770      	adds	r7, #112	; 0x70
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40008000 	.word	0x40008000

0800407c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b0ac      	sub	sp, #176	; 0xb0
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800408a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b2:	2b22      	cmp	r3, #34	; 0x22
 80040b4:	f040 8182 	bne.w	80043bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80040be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040c2:	e125      	b.n	8004310 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80040d2:	b2d9      	uxtb	r1, r3
 80040d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	400a      	ands	r2, r1
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800410a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	2b00      	cmp	r3, #0
 8004114:	d053      	beq.n	80041be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d011      	beq.n	8004146 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d011      	beq.n	8004176 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f043 0204 	orr.w	r2, r3, #4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d011      	beq.n	80041a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2204      	movs	r2, #4
 8004194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f043 0202 	orr.w	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fe fdaf 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 80a2 	bne.w	8004310 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80041da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041f0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80041f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80041fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e4      	bne.n	80041cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800422a:	66ba      	str	r2, [r7, #104]	; 0x68
 800422c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004230:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e1      	bne.n	8004202 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a5f      	ldr	r2, [pc, #380]	; (80043d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d021      	beq.n	80042a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800427e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800428c:	657b      	str	r3, [r7, #84]	; 0x54
 800428e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e4      	bne.n	800426a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d130      	bne.n	800430a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d0:	643b      	str	r3, [r7, #64]	; 0x40
 80042d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e4      	bne.n	80042ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d103      	bne.n	80042fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2210      	movs	r2, #16
 80042f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc fb84 	bl	8000a10 <HAL_UARTEx_RxEventCallback>
 8004308:	e002      	b.n	8004310 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe fcf8 	bl	8002d00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004310:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f aecf 	bne.w	80040c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800432c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004330:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004334:	2b00      	cmp	r3, #0
 8004336:	d049      	beq.n	80043cc <UART_RxISR_8BIT_FIFOEN+0x350>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800433e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004342:	429a      	cmp	r2, r3
 8004344:	d242      	bcs.n	80043cc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	61fb      	str	r3, [r7, #28]
   return(result);
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800436a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e3      	bne.n	8004346 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004382:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60bb      	str	r3, [r7, #8]
   return(result);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f043 0320 	orr.w	r3, r3, #32
 8004398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6979      	ldr	r1, [r7, #20]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	613b      	str	r3, [r7, #16]
   return(result);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ba:	e007      	b.n	80043cc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	619a      	str	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	37b0      	adds	r7, #176	; 0xb0
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40008000 	.word	0x40008000
 80043d8:	08003d0d 	.word	0x08003d0d

080043dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0ae      	sub	sp, #184	; 0xb8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004412:	2b22      	cmp	r3, #34	; 0x22
 8004414:	f040 8186 	bne.w	8004724 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800441e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004422:	e129      	b.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004436:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800443a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800443e:	4013      	ands	r3, r2
 8004440:	b29a      	uxth	r2, r3
 8004442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	1c9a      	adds	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800446e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b00      	cmp	r3, #0
 8004478:	d053      	beq.n	8004522 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800447a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d011      	beq.n	80044aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8004486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f043 0201 	orr.w	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80044b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2202      	movs	r2, #2
 80044c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f043 0204 	orr.w	r2, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d011      	beq.n	800450a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80044e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f043 0202 	orr.w	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	2b00      	cmp	r3, #0
 8004512:	d006      	beq.n	8004522 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fe fbfd 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 80a4 	bne.w	8004678 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004556:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800455a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e2      	bne.n	8004530 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800457a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e1      	bne.n	800456a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5f      	ldr	r2, [pc, #380]	; (800473c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d021      	beq.n	8004608 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01a      	beq.n	8004608 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e4      	bne.n	80045d2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d130      	bne.n	8004672 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	f023 0310 	bic.w	r3, r3, #16
 800462a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
 800463a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800463e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e4      	bne.n	8004616 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b10      	cmp	r3, #16
 8004658:	d103      	bne.n	8004662 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2210      	movs	r2, #16
 8004660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc f9d0 	bl	8000a10 <HAL_UARTEx_RxEventCallback>
 8004670:	e002      	b.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fe fb44 	bl	8002d00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004678:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	f47f aecb 	bne.w	8004424 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004694:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004698:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800469c:	2b00      	cmp	r3, #0
 800469e:	d049      	beq.n	8004734 <UART_RxISR_16BIT_FIFOEN+0x358>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80046a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d242      	bcs.n	8004734 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	623b      	str	r3, [r7, #32]
   return(result);
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80046d2:	633a      	str	r2, [r7, #48]	; 0x30
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e3      	bne.n	80046ae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80046ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f043 0320 	orr.w	r3, r3, #32
 8004700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	617b      	str	r3, [r7, #20]
   return(result);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e4      	bne.n	80046ec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004722:	e007      	b.n	8004734 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	619a      	str	r2, [r3, #24]
}
 8004734:	bf00      	nop
 8004736:	37b8      	adds	r7, #184	; 0xb8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40008000 	.word	0x40008000
 8004740:	08003ec5 	.word	0x08003ec5

08004744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UARTEx_DisableFifoMode+0x16>
 8004792:	2302      	movs	r3, #2
 8004794:	e027      	b.n	80047e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	; 0x24
 80047a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004806:	2302      	movs	r3, #2
 8004808:	e02d      	b.n	8004866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8a0 	bl	800498c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004882:	2302      	movs	r3, #2
 8004884:	e02d      	b.n	80048e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2224      	movs	r2, #36	; 0x24
 8004892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f862 	bl	800498c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b08c      	sub	sp, #48	; 0x30
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	2b20      	cmp	r3, #32
 8004906:	d13b      	bne.n	8004980 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e034      	b.n	8004982 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	461a      	mov	r2, r3
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7fe fe82 	bl	8003634 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d11d      	bne.n	8004974 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2210      	movs	r2, #16
 800493e:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	617b      	str	r3, [r7, #20]
   return(result);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f043 0310 	orr.w	r3, r3, #16
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
 8004960:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6a39      	ldr	r1, [r7, #32]
 8004964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	61fb      	str	r3, [r7, #28]
   return(result);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e6      	bne.n	8004940 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8004972:	e002      	b.n	800497a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800497a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800497e:	e000      	b.n	8004982 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3730      	adds	r7, #48	; 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004998:	2b00      	cmp	r3, #0
 800499a:	d108      	bne.n	80049ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049ac:	e031      	b.n	8004a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049ae:	2308      	movs	r3, #8
 80049b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049b2:	2308      	movs	r3, #8
 80049b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	0e5b      	lsrs	r3, r3, #25
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	0f5b      	lsrs	r3, r3, #29
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049d6:	7bbb      	ldrb	r3, [r7, #14]
 80049d8:	7b3a      	ldrb	r2, [r7, #12]
 80049da:	4911      	ldr	r1, [pc, #68]	; (8004a20 <UARTEx_SetNbDataToProcess+0x94>)
 80049dc:	5c8a      	ldrb	r2, [r1, r2]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049e2:	7b3a      	ldrb	r2, [r7, #12]
 80049e4:	490f      	ldr	r1, [pc, #60]	; (8004a24 <UARTEx_SetNbDataToProcess+0x98>)
 80049e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	7b7a      	ldrb	r2, [r7, #13]
 80049f8:	4909      	ldr	r1, [pc, #36]	; (8004a20 <UARTEx_SetNbDataToProcess+0x94>)
 80049fa:	5c8a      	ldrb	r2, [r1, r2]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a00:	7b7a      	ldrb	r2, [r7, #13]
 8004a02:	4908      	ldr	r1, [pc, #32]	; (8004a24 <UARTEx_SetNbDataToProcess+0x98>)
 8004a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	08005a58 	.word	0x08005a58
 8004a24:	08005a60 	.word	0x08005a60

08004a28 <rand>:
 8004a28:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <rand+0x5c>)
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a30:	b9b3      	cbnz	r3, 8004a60 <rand+0x38>
 8004a32:	2018      	movs	r0, #24
 8004a34:	f000 fa30 	bl	8004e98 <malloc>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6320      	str	r0, [r4, #48]	; 0x30
 8004a3c:	b920      	cbnz	r0, 8004a48 <rand+0x20>
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <rand+0x60>)
 8004a40:	4812      	ldr	r0, [pc, #72]	; (8004a8c <rand+0x64>)
 8004a42:	2152      	movs	r1, #82	; 0x52
 8004a44:	f000 f9be 	bl	8004dc4 <__assert_func>
 8004a48:	4911      	ldr	r1, [pc, #68]	; (8004a90 <rand+0x68>)
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <rand+0x6c>)
 8004a4c:	e9c0 1300 	strd	r1, r3, [r0]
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <rand+0x70>)
 8004a52:	6083      	str	r3, [r0, #8]
 8004a54:	230b      	movs	r3, #11
 8004a56:	8183      	strh	r3, [r0, #12]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a60:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a62:	480e      	ldr	r0, [pc, #56]	; (8004a9c <rand+0x74>)
 8004a64:	690b      	ldr	r3, [r1, #16]
 8004a66:	694c      	ldr	r4, [r1, #20]
 8004a68:	4a0d      	ldr	r2, [pc, #52]	; (8004aa0 <rand+0x78>)
 8004a6a:	4358      	muls	r0, r3
 8004a6c:	fb02 0004 	mla	r0, r2, r4, r0
 8004a70:	fba3 3202 	umull	r3, r2, r3, r2
 8004a74:	3301      	adds	r3, #1
 8004a76:	eb40 0002 	adc.w	r0, r0, r2
 8004a7a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004a7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a82:	bd10      	pop	{r4, pc}
 8004a84:	20000064 	.word	0x20000064
 8004a88:	08005a68 	.word	0x08005a68
 8004a8c:	08005a7f 	.word	0x08005a7f
 8004a90:	abcd330e 	.word	0xabcd330e
 8004a94:	e66d1234 	.word	0xe66d1234
 8004a98:	0005deec 	.word	0x0005deec
 8004a9c:	5851f42d 	.word	0x5851f42d
 8004aa0:	4c957f2d 	.word	0x4c957f2d

08004aa4 <std>:
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8004aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ab2:	6083      	str	r3, [r0, #8]
 8004ab4:	8181      	strh	r1, [r0, #12]
 8004ab6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ab8:	81c2      	strh	r2, [r0, #14]
 8004aba:	6183      	str	r3, [r0, #24]
 8004abc:	4619      	mov	r1, r3
 8004abe:	2208      	movs	r2, #8
 8004ac0:	305c      	adds	r0, #92	; 0x5c
 8004ac2:	f000 f8f4 	bl	8004cae <memset>
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <std+0x58>)
 8004ac8:	6263      	str	r3, [r4, #36]	; 0x24
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <std+0x5c>)
 8004acc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <std+0x60>)
 8004ad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <std+0x64>)
 8004ad4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <std+0x68>)
 8004ad8:	6224      	str	r4, [r4, #32]
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d006      	beq.n	8004aec <std+0x48>
 8004ade:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ae2:	4294      	cmp	r4, r2
 8004ae4:	d002      	beq.n	8004aec <std+0x48>
 8004ae6:	33d0      	adds	r3, #208	; 0xd0
 8004ae8:	429c      	cmp	r4, r3
 8004aea:	d105      	bne.n	8004af8 <std+0x54>
 8004aec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f000 b954 	b.w	8004da0 <__retarget_lock_init_recursive>
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	08004c29 	.word	0x08004c29
 8004b00:	08004c4b 	.word	0x08004c4b
 8004b04:	08004c83 	.word	0x08004c83
 8004b08:	08004ca7 	.word	0x08004ca7
 8004b0c:	20000228 	.word	0x20000228

08004b10 <stdio_exit_handler>:
 8004b10:	4a02      	ldr	r2, [pc, #8]	; (8004b1c <stdio_exit_handler+0xc>)
 8004b12:	4903      	ldr	r1, [pc, #12]	; (8004b20 <stdio_exit_handler+0x10>)
 8004b14:	4803      	ldr	r0, [pc, #12]	; (8004b24 <stdio_exit_handler+0x14>)
 8004b16:	f000 b869 	b.w	8004bec <_fwalk_sglue>
 8004b1a:	bf00      	nop
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	0800510d 	.word	0x0800510d
 8004b24:	20000018 	.word	0x20000018

08004b28 <cleanup_stdio>:
 8004b28:	6841      	ldr	r1, [r0, #4]
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <cleanup_stdio+0x34>)
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	4604      	mov	r4, r0
 8004b32:	d001      	beq.n	8004b38 <cleanup_stdio+0x10>
 8004b34:	f000 faea 	bl	800510c <_fflush_r>
 8004b38:	68a1      	ldr	r1, [r4, #8]
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <cleanup_stdio+0x38>)
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d002      	beq.n	8004b46 <cleanup_stdio+0x1e>
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 fae3 	bl	800510c <_fflush_r>
 8004b46:	68e1      	ldr	r1, [r4, #12]
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <cleanup_stdio+0x3c>)
 8004b4a:	4299      	cmp	r1, r3
 8004b4c:	d004      	beq.n	8004b58 <cleanup_stdio+0x30>
 8004b4e:	4620      	mov	r0, r4
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	f000 bada 	b.w	800510c <_fflush_r>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000228 	.word	0x20000228
 8004b60:	20000290 	.word	0x20000290
 8004b64:	200002f8 	.word	0x200002f8

08004b68 <global_stdio_init.part.0>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <global_stdio_init.part.0+0x30>)
 8004b6c:	4c0b      	ldr	r4, [pc, #44]	; (8004b9c <global_stdio_init.part.0+0x34>)
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <global_stdio_init.part.0+0x38>)
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	4620      	mov	r0, r4
 8004b74:	2200      	movs	r2, #0
 8004b76:	2104      	movs	r1, #4
 8004b78:	f7ff ff94 	bl	8004aa4 <std>
 8004b7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b80:	2201      	movs	r2, #1
 8004b82:	2109      	movs	r1, #9
 8004b84:	f7ff ff8e 	bl	8004aa4 <std>
 8004b88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b92:	2112      	movs	r1, #18
 8004b94:	f7ff bf86 	b.w	8004aa4 <std>
 8004b98:	20000360 	.word	0x20000360
 8004b9c:	20000228 	.word	0x20000228
 8004ba0:	08004b11 	.word	0x08004b11

08004ba4 <__sfp_lock_acquire>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sfp_lock_acquire+0x8>)
 8004ba6:	f000 b8fc 	b.w	8004da2 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	20000369 	.word	0x20000369

08004bb0 <__sfp_lock_release>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sfp_lock_release+0x8>)
 8004bb2:	f000 b8f7 	b.w	8004da4 <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	20000369 	.word	0x20000369

08004bbc <__sinit>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	f7ff fff0 	bl	8004ba4 <__sfp_lock_acquire>
 8004bc4:	6a23      	ldr	r3, [r4, #32]
 8004bc6:	b11b      	cbz	r3, 8004bd0 <__sinit+0x14>
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f7ff bff0 	b.w	8004bb0 <__sfp_lock_release>
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <__sinit+0x28>)
 8004bd2:	6223      	str	r3, [r4, #32]
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <__sinit+0x2c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f5      	bne.n	8004bc8 <__sinit+0xc>
 8004bdc:	f7ff ffc4 	bl	8004b68 <global_stdio_init.part.0>
 8004be0:	e7f2      	b.n	8004bc8 <__sinit+0xc>
 8004be2:	bf00      	nop
 8004be4:	08004b29 	.word	0x08004b29
 8004be8:	20000360 	.word	0x20000360

08004bec <_fwalk_sglue>:
 8004bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	4688      	mov	r8, r1
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8004c00:	d505      	bpl.n	8004c0e <_fwalk_sglue+0x22>
 8004c02:	6824      	ldr	r4, [r4, #0]
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d1f7      	bne.n	8004bf8 <_fwalk_sglue+0xc>
 8004c08:	4630      	mov	r0, r6
 8004c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d907      	bls.n	8004c24 <_fwalk_sglue+0x38>
 8004c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	d003      	beq.n	8004c24 <_fwalk_sglue+0x38>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4638      	mov	r0, r7
 8004c20:	47c0      	blx	r8
 8004c22:	4306      	orrs	r6, r0
 8004c24:	3568      	adds	r5, #104	; 0x68
 8004c26:	e7e9      	b.n	8004bfc <_fwalk_sglue+0x10>

08004c28 <__sread>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c30:	f000 f868 	bl	8004d04 <_read_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	bfab      	itete	ge
 8004c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c3c:	181b      	addge	r3, r3, r0
 8004c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c42:	bfac      	ite	ge
 8004c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c46:	81a3      	strhlt	r3, [r4, #12]
 8004c48:	bd10      	pop	{r4, pc}

08004c4a <__swrite>:
 8004c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4e:	461f      	mov	r7, r3
 8004c50:	898b      	ldrh	r3, [r1, #12]
 8004c52:	05db      	lsls	r3, r3, #23
 8004c54:	4605      	mov	r5, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	4616      	mov	r6, r2
 8004c5a:	d505      	bpl.n	8004c68 <__swrite+0x1e>
 8004c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c60:	2302      	movs	r3, #2
 8004c62:	2200      	movs	r2, #0
 8004c64:	f000 f83c 	bl	8004ce0 <_lseek_r>
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	4632      	mov	r2, r6
 8004c76:	463b      	mov	r3, r7
 8004c78:	4628      	mov	r0, r5
 8004c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7e:	f000 b853 	b.w	8004d28 <_write_r>

08004c82 <__sseek>:
 8004c82:	b510      	push	{r4, lr}
 8004c84:	460c      	mov	r4, r1
 8004c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8a:	f000 f829 	bl	8004ce0 <_lseek_r>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	bf15      	itete	ne
 8004c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c9e:	81a3      	strheq	r3, [r4, #12]
 8004ca0:	bf18      	it	ne
 8004ca2:	81a3      	strhne	r3, [r4, #12]
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <__sclose>:
 8004ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004caa:	f000 b809 	b.w	8004cc0 <_close_r>

08004cae <memset>:
 8004cae:	4402      	add	r2, r0
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <memset+0xa>
 8004cb6:	4770      	bx	lr
 8004cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbc:	e7f9      	b.n	8004cb2 <memset+0x4>
	...

08004cc0 <_close_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d06      	ldr	r5, [pc, #24]	; (8004cdc <_close_r+0x1c>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fb fddf 	bl	800088e <_close>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_close_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_close_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	20000364 	.word	0x20000364

08004ce0 <_lseek_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	; (8004d00 <_lseek_r+0x20>)
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fb fdf4 	bl	80008dc <_lseek>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_lseek_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_lseek_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000364 	.word	0x20000364

08004d04 <_read_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	; (8004d24 <_read_r+0x20>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fb fd82 	bl	800081c <_read>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_read_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_read_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20000364 	.word	0x20000364

08004d28 <_write_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	; (8004d48 <_write_r+0x20>)
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fb fd8d 	bl	8000856 <_write>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_write_r+0x1e>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_write_r+0x1e>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000364 	.word	0x20000364

08004d4c <__errno>:
 8004d4c:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <__errno+0x8>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000064 	.word	0x20000064

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 fe50 	bl	8005a10 <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08005b50 	.word	0x08005b50
 8004d94:	08005b50 	.word	0x08005b50
 8004d98:	08005b50 	.word	0x08005b50
 8004d9c:	08005b54 	.word	0x08005b54

08004da0 <__retarget_lock_init_recursive>:
 8004da0:	4770      	bx	lr

08004da2 <__retarget_lock_acquire_recursive>:
 8004da2:	4770      	bx	lr

08004da4 <__retarget_lock_release_recursive>:
 8004da4:	4770      	bx	lr

08004da6 <memcpy>:
 8004da6:	440a      	add	r2, r1
 8004da8:	4291      	cmp	r1, r2
 8004daa:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dae:	d100      	bne.n	8004db2 <memcpy+0xc>
 8004db0:	4770      	bx	lr
 8004db2:	b510      	push	{r4, lr}
 8004db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dbc:	4291      	cmp	r1, r2
 8004dbe:	d1f9      	bne.n	8004db4 <memcpy+0xe>
 8004dc0:	bd10      	pop	{r4, pc}
	...

08004dc4 <__assert_func>:
 8004dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004dc6:	4614      	mov	r4, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <__assert_func+0x2c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4605      	mov	r5, r0
 8004dd0:	68d8      	ldr	r0, [r3, #12]
 8004dd2:	b14c      	cbz	r4, 8004de8 <__assert_func+0x24>
 8004dd4:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <__assert_func+0x30>)
 8004dd6:	9100      	str	r1, [sp, #0]
 8004dd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ddc:	4906      	ldr	r1, [pc, #24]	; (8004df8 <__assert_func+0x34>)
 8004dde:	462b      	mov	r3, r5
 8004de0:	f000 f9bc 	bl	800515c <fiprintf>
 8004de4:	f000 f9dc 	bl	80051a0 <abort>
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <__assert_func+0x38>)
 8004dea:	461c      	mov	r4, r3
 8004dec:	e7f3      	b.n	8004dd6 <__assert_func+0x12>
 8004dee:	bf00      	nop
 8004df0:	20000064 	.word	0x20000064
 8004df4:	08005ad7 	.word	0x08005ad7
 8004df8:	08005ae4 	.word	0x08005ae4
 8004dfc:	08005b12 	.word	0x08005b12

08004e00 <_free_r>:
 8004e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e02:	2900      	cmp	r1, #0
 8004e04:	d044      	beq.n	8004e90 <_free_r+0x90>
 8004e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e0a:	9001      	str	r0, [sp, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e12:	bfb8      	it	lt
 8004e14:	18e4      	addlt	r4, r4, r3
 8004e16:	f000 f8e7 	bl	8004fe8 <__malloc_lock>
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <_free_r+0x94>)
 8004e1c:	9801      	ldr	r0, [sp, #4]
 8004e1e:	6813      	ldr	r3, [r2, #0]
 8004e20:	b933      	cbnz	r3, 8004e30 <_free_r+0x30>
 8004e22:	6063      	str	r3, [r4, #4]
 8004e24:	6014      	str	r4, [r2, #0]
 8004e26:	b003      	add	sp, #12
 8004e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e2c:	f000 b8e2 	b.w	8004ff4 <__malloc_unlock>
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	d908      	bls.n	8004e46 <_free_r+0x46>
 8004e34:	6825      	ldr	r5, [r4, #0]
 8004e36:	1961      	adds	r1, r4, r5
 8004e38:	428b      	cmp	r3, r1
 8004e3a:	bf01      	itttt	eq
 8004e3c:	6819      	ldreq	r1, [r3, #0]
 8004e3e:	685b      	ldreq	r3, [r3, #4]
 8004e40:	1949      	addeq	r1, r1, r5
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	e7ed      	b.n	8004e22 <_free_r+0x22>
 8004e46:	461a      	mov	r2, r3
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b10b      	cbz	r3, 8004e50 <_free_r+0x50>
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	d9fa      	bls.n	8004e46 <_free_r+0x46>
 8004e50:	6811      	ldr	r1, [r2, #0]
 8004e52:	1855      	adds	r5, r2, r1
 8004e54:	42a5      	cmp	r5, r4
 8004e56:	d10b      	bne.n	8004e70 <_free_r+0x70>
 8004e58:	6824      	ldr	r4, [r4, #0]
 8004e5a:	4421      	add	r1, r4
 8004e5c:	1854      	adds	r4, r2, r1
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	6011      	str	r1, [r2, #0]
 8004e62:	d1e0      	bne.n	8004e26 <_free_r+0x26>
 8004e64:	681c      	ldr	r4, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	6053      	str	r3, [r2, #4]
 8004e6a:	440c      	add	r4, r1
 8004e6c:	6014      	str	r4, [r2, #0]
 8004e6e:	e7da      	b.n	8004e26 <_free_r+0x26>
 8004e70:	d902      	bls.n	8004e78 <_free_r+0x78>
 8004e72:	230c      	movs	r3, #12
 8004e74:	6003      	str	r3, [r0, #0]
 8004e76:	e7d6      	b.n	8004e26 <_free_r+0x26>
 8004e78:	6825      	ldr	r5, [r4, #0]
 8004e7a:	1961      	adds	r1, r4, r5
 8004e7c:	428b      	cmp	r3, r1
 8004e7e:	bf04      	itt	eq
 8004e80:	6819      	ldreq	r1, [r3, #0]
 8004e82:	685b      	ldreq	r3, [r3, #4]
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	bf04      	itt	eq
 8004e88:	1949      	addeq	r1, r1, r5
 8004e8a:	6021      	streq	r1, [r4, #0]
 8004e8c:	6054      	str	r4, [r2, #4]
 8004e8e:	e7ca      	b.n	8004e26 <_free_r+0x26>
 8004e90:	b003      	add	sp, #12
 8004e92:	bd30      	pop	{r4, r5, pc}
 8004e94:	2000036c 	.word	0x2000036c

08004e98 <malloc>:
 8004e98:	4b02      	ldr	r3, [pc, #8]	; (8004ea4 <malloc+0xc>)
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	f000 b823 	b.w	8004ee8 <_malloc_r>
 8004ea2:	bf00      	nop
 8004ea4:	20000064 	.word	0x20000064

08004ea8 <sbrk_aligned>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4e0e      	ldr	r6, [pc, #56]	; (8004ee4 <sbrk_aligned+0x3c>)
 8004eac:	460c      	mov	r4, r1
 8004eae:	6831      	ldr	r1, [r6, #0]
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	b911      	cbnz	r1, 8004eba <sbrk_aligned+0x12>
 8004eb4:	f000 f964 	bl	8005180 <_sbrk_r>
 8004eb8:	6030      	str	r0, [r6, #0]
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 f95f 	bl	8005180 <_sbrk_r>
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	d00a      	beq.n	8004edc <sbrk_aligned+0x34>
 8004ec6:	1cc4      	adds	r4, r0, #3
 8004ec8:	f024 0403 	bic.w	r4, r4, #3
 8004ecc:	42a0      	cmp	r0, r4
 8004ece:	d007      	beq.n	8004ee0 <sbrk_aligned+0x38>
 8004ed0:	1a21      	subs	r1, r4, r0
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 f954 	bl	8005180 <_sbrk_r>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d101      	bne.n	8004ee0 <sbrk_aligned+0x38>
 8004edc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	20000370 	.word	0x20000370

08004ee8 <_malloc_r>:
 8004ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	1ccd      	adds	r5, r1, #3
 8004eee:	f025 0503 	bic.w	r5, r5, #3
 8004ef2:	3508      	adds	r5, #8
 8004ef4:	2d0c      	cmp	r5, #12
 8004ef6:	bf38      	it	cc
 8004ef8:	250c      	movcc	r5, #12
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	4607      	mov	r7, r0
 8004efe:	db01      	blt.n	8004f04 <_malloc_r+0x1c>
 8004f00:	42a9      	cmp	r1, r5
 8004f02:	d905      	bls.n	8004f10 <_malloc_r+0x28>
 8004f04:	230c      	movs	r3, #12
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	2600      	movs	r6, #0
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fe4 <_malloc_r+0xfc>
 8004f14:	f000 f868 	bl	8004fe8 <__malloc_lock>
 8004f18:	f8d8 3000 	ldr.w	r3, [r8]
 8004f1c:	461c      	mov	r4, r3
 8004f1e:	bb5c      	cbnz	r4, 8004f78 <_malloc_r+0x90>
 8004f20:	4629      	mov	r1, r5
 8004f22:	4638      	mov	r0, r7
 8004f24:	f7ff ffc0 	bl	8004ea8 <sbrk_aligned>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	d155      	bne.n	8004fda <_malloc_r+0xf2>
 8004f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f32:	4626      	mov	r6, r4
 8004f34:	2e00      	cmp	r6, #0
 8004f36:	d145      	bne.n	8004fc4 <_malloc_r+0xdc>
 8004f38:	2c00      	cmp	r4, #0
 8004f3a:	d048      	beq.n	8004fce <_malloc_r+0xe6>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4638      	mov	r0, r7
 8004f42:	eb04 0903 	add.w	r9, r4, r3
 8004f46:	f000 f91b 	bl	8005180 <_sbrk_r>
 8004f4a:	4581      	cmp	r9, r0
 8004f4c:	d13f      	bne.n	8004fce <_malloc_r+0xe6>
 8004f4e:	6821      	ldr	r1, [r4, #0]
 8004f50:	1a6d      	subs	r5, r5, r1
 8004f52:	4629      	mov	r1, r5
 8004f54:	4638      	mov	r0, r7
 8004f56:	f7ff ffa7 	bl	8004ea8 <sbrk_aligned>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d037      	beq.n	8004fce <_malloc_r+0xe6>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	442b      	add	r3, r5
 8004f62:	6023      	str	r3, [r4, #0]
 8004f64:	f8d8 3000 	ldr.w	r3, [r8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d038      	beq.n	8004fde <_malloc_r+0xf6>
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	42a2      	cmp	r2, r4
 8004f70:	d12b      	bne.n	8004fca <_malloc_r+0xe2>
 8004f72:	2200      	movs	r2, #0
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	e00f      	b.n	8004f98 <_malloc_r+0xb0>
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	1b52      	subs	r2, r2, r5
 8004f7c:	d41f      	bmi.n	8004fbe <_malloc_r+0xd6>
 8004f7e:	2a0b      	cmp	r2, #11
 8004f80:	d917      	bls.n	8004fb2 <_malloc_r+0xca>
 8004f82:	1961      	adds	r1, r4, r5
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	6025      	str	r5, [r4, #0]
 8004f88:	bf18      	it	ne
 8004f8a:	6059      	strne	r1, [r3, #4]
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	bf08      	it	eq
 8004f90:	f8c8 1000 	streq.w	r1, [r8]
 8004f94:	5162      	str	r2, [r4, r5]
 8004f96:	604b      	str	r3, [r1, #4]
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f104 060b 	add.w	r6, r4, #11
 8004f9e:	f000 f829 	bl	8004ff4 <__malloc_unlock>
 8004fa2:	f026 0607 	bic.w	r6, r6, #7
 8004fa6:	1d23      	adds	r3, r4, #4
 8004fa8:	1af2      	subs	r2, r6, r3
 8004faa:	d0ae      	beq.n	8004f0a <_malloc_r+0x22>
 8004fac:	1b9b      	subs	r3, r3, r6
 8004fae:	50a3      	str	r3, [r4, r2]
 8004fb0:	e7ab      	b.n	8004f0a <_malloc_r+0x22>
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	6862      	ldr	r2, [r4, #4]
 8004fb6:	d1dd      	bne.n	8004f74 <_malloc_r+0x8c>
 8004fb8:	f8c8 2000 	str.w	r2, [r8]
 8004fbc:	e7ec      	b.n	8004f98 <_malloc_r+0xb0>
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	6864      	ldr	r4, [r4, #4]
 8004fc2:	e7ac      	b.n	8004f1e <_malloc_r+0x36>
 8004fc4:	4634      	mov	r4, r6
 8004fc6:	6876      	ldr	r6, [r6, #4]
 8004fc8:	e7b4      	b.n	8004f34 <_malloc_r+0x4c>
 8004fca:	4613      	mov	r3, r2
 8004fcc:	e7cc      	b.n	8004f68 <_malloc_r+0x80>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	f000 f80e 	bl	8004ff4 <__malloc_unlock>
 8004fd8:	e797      	b.n	8004f0a <_malloc_r+0x22>
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	e7dc      	b.n	8004f98 <_malloc_r+0xb0>
 8004fde:	605b      	str	r3, [r3, #4]
 8004fe0:	deff      	udf	#255	; 0xff
 8004fe2:	bf00      	nop
 8004fe4:	2000036c 	.word	0x2000036c

08004fe8 <__malloc_lock>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__malloc_lock+0x8>)
 8004fea:	f7ff beda 	b.w	8004da2 <__retarget_lock_acquire_recursive>
 8004fee:	bf00      	nop
 8004ff0:	20000368 	.word	0x20000368

08004ff4 <__malloc_unlock>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <__malloc_unlock+0x8>)
 8004ff6:	f7ff bed5 	b.w	8004da4 <__retarget_lock_release_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	20000368 	.word	0x20000368

08005000 <__sflush_r>:
 8005000:	898a      	ldrh	r2, [r1, #12]
 8005002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005006:	4605      	mov	r5, r0
 8005008:	0710      	lsls	r0, r2, #28
 800500a:	460c      	mov	r4, r1
 800500c:	d458      	bmi.n	80050c0 <__sflush_r+0xc0>
 800500e:	684b      	ldr	r3, [r1, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	dc05      	bgt.n	8005020 <__sflush_r+0x20>
 8005014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	dc02      	bgt.n	8005020 <__sflush_r+0x20>
 800501a:	2000      	movs	r0, #0
 800501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005022:	2e00      	cmp	r6, #0
 8005024:	d0f9      	beq.n	800501a <__sflush_r+0x1a>
 8005026:	2300      	movs	r3, #0
 8005028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800502c:	682f      	ldr	r7, [r5, #0]
 800502e:	6a21      	ldr	r1, [r4, #32]
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	d032      	beq.n	800509a <__sflush_r+0x9a>
 8005034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	075a      	lsls	r2, r3, #29
 800503a:	d505      	bpl.n	8005048 <__sflush_r+0x48>
 800503c:	6863      	ldr	r3, [r4, #4]
 800503e:	1ac0      	subs	r0, r0, r3
 8005040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005042:	b10b      	cbz	r3, 8005048 <__sflush_r+0x48>
 8005044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005046:	1ac0      	subs	r0, r0, r3
 8005048:	2300      	movs	r3, #0
 800504a:	4602      	mov	r2, r0
 800504c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800504e:	6a21      	ldr	r1, [r4, #32]
 8005050:	4628      	mov	r0, r5
 8005052:	47b0      	blx	r6
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	d106      	bne.n	8005068 <__sflush_r+0x68>
 800505a:	6829      	ldr	r1, [r5, #0]
 800505c:	291d      	cmp	r1, #29
 800505e:	d82b      	bhi.n	80050b8 <__sflush_r+0xb8>
 8005060:	4a29      	ldr	r2, [pc, #164]	; (8005108 <__sflush_r+0x108>)
 8005062:	410a      	asrs	r2, r1
 8005064:	07d6      	lsls	r6, r2, #31
 8005066:	d427      	bmi.n	80050b8 <__sflush_r+0xb8>
 8005068:	2200      	movs	r2, #0
 800506a:	6062      	str	r2, [r4, #4]
 800506c:	04d9      	lsls	r1, r3, #19
 800506e:	6922      	ldr	r2, [r4, #16]
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	d504      	bpl.n	800507e <__sflush_r+0x7e>
 8005074:	1c42      	adds	r2, r0, #1
 8005076:	d101      	bne.n	800507c <__sflush_r+0x7c>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b903      	cbnz	r3, 800507e <__sflush_r+0x7e>
 800507c:	6560      	str	r0, [r4, #84]	; 0x54
 800507e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005080:	602f      	str	r7, [r5, #0]
 8005082:	2900      	cmp	r1, #0
 8005084:	d0c9      	beq.n	800501a <__sflush_r+0x1a>
 8005086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800508a:	4299      	cmp	r1, r3
 800508c:	d002      	beq.n	8005094 <__sflush_r+0x94>
 800508e:	4628      	mov	r0, r5
 8005090:	f7ff feb6 	bl	8004e00 <_free_r>
 8005094:	2000      	movs	r0, #0
 8005096:	6360      	str	r0, [r4, #52]	; 0x34
 8005098:	e7c0      	b.n	800501c <__sflush_r+0x1c>
 800509a:	2301      	movs	r3, #1
 800509c:	4628      	mov	r0, r5
 800509e:	47b0      	blx	r6
 80050a0:	1c41      	adds	r1, r0, #1
 80050a2:	d1c8      	bne.n	8005036 <__sflush_r+0x36>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0c5      	beq.n	8005036 <__sflush_r+0x36>
 80050aa:	2b1d      	cmp	r3, #29
 80050ac:	d001      	beq.n	80050b2 <__sflush_r+0xb2>
 80050ae:	2b16      	cmp	r3, #22
 80050b0:	d101      	bne.n	80050b6 <__sflush_r+0xb6>
 80050b2:	602f      	str	r7, [r5, #0]
 80050b4:	e7b1      	b.n	800501a <__sflush_r+0x1a>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	e7ad      	b.n	800501c <__sflush_r+0x1c>
 80050c0:	690f      	ldr	r7, [r1, #16]
 80050c2:	2f00      	cmp	r7, #0
 80050c4:	d0a9      	beq.n	800501a <__sflush_r+0x1a>
 80050c6:	0793      	lsls	r3, r2, #30
 80050c8:	680e      	ldr	r6, [r1, #0]
 80050ca:	bf08      	it	eq
 80050cc:	694b      	ldreq	r3, [r1, #20]
 80050ce:	600f      	str	r7, [r1, #0]
 80050d0:	bf18      	it	ne
 80050d2:	2300      	movne	r3, #0
 80050d4:	eba6 0807 	sub.w	r8, r6, r7
 80050d8:	608b      	str	r3, [r1, #8]
 80050da:	f1b8 0f00 	cmp.w	r8, #0
 80050de:	dd9c      	ble.n	800501a <__sflush_r+0x1a>
 80050e0:	6a21      	ldr	r1, [r4, #32]
 80050e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050e4:	4643      	mov	r3, r8
 80050e6:	463a      	mov	r2, r7
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b0      	blx	r6
 80050ec:	2800      	cmp	r0, #0
 80050ee:	dc06      	bgt.n	80050fe <__sflush_r+0xfe>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e78e      	b.n	800501c <__sflush_r+0x1c>
 80050fe:	4407      	add	r7, r0
 8005100:	eba8 0800 	sub.w	r8, r8, r0
 8005104:	e7e9      	b.n	80050da <__sflush_r+0xda>
 8005106:	bf00      	nop
 8005108:	dfbffffe 	.word	0xdfbffffe

0800510c <_fflush_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	690b      	ldr	r3, [r1, #16]
 8005110:	4605      	mov	r5, r0
 8005112:	460c      	mov	r4, r1
 8005114:	b913      	cbnz	r3, 800511c <_fflush_r+0x10>
 8005116:	2500      	movs	r5, #0
 8005118:	4628      	mov	r0, r5
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	b118      	cbz	r0, 8005126 <_fflush_r+0x1a>
 800511e:	6a03      	ldr	r3, [r0, #32]
 8005120:	b90b      	cbnz	r3, 8005126 <_fflush_r+0x1a>
 8005122:	f7ff fd4b 	bl	8004bbc <__sinit>
 8005126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f3      	beq.n	8005116 <_fflush_r+0xa>
 800512e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d404      	bmi.n	800513e <_fflush_r+0x32>
 8005134:	0599      	lsls	r1, r3, #22
 8005136:	d402      	bmi.n	800513e <_fflush_r+0x32>
 8005138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513a:	f7ff fe32 	bl	8004da2 <__retarget_lock_acquire_recursive>
 800513e:	4628      	mov	r0, r5
 8005140:	4621      	mov	r1, r4
 8005142:	f7ff ff5d 	bl	8005000 <__sflush_r>
 8005146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005148:	07da      	lsls	r2, r3, #31
 800514a:	4605      	mov	r5, r0
 800514c:	d4e4      	bmi.n	8005118 <_fflush_r+0xc>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	059b      	lsls	r3, r3, #22
 8005152:	d4e1      	bmi.n	8005118 <_fflush_r+0xc>
 8005154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005156:	f7ff fe25 	bl	8004da4 <__retarget_lock_release_recursive>
 800515a:	e7dd      	b.n	8005118 <_fflush_r+0xc>

0800515c <fiprintf>:
 800515c:	b40e      	push	{r1, r2, r3}
 800515e:	b503      	push	{r0, r1, lr}
 8005160:	4601      	mov	r1, r0
 8005162:	ab03      	add	r3, sp, #12
 8005164:	4805      	ldr	r0, [pc, #20]	; (800517c <fiprintf+0x20>)
 8005166:	f853 2b04 	ldr.w	r2, [r3], #4
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	f000 f847 	bl	8005200 <_vfiprintf_r>
 8005172:	b002      	add	sp, #8
 8005174:	f85d eb04 	ldr.w	lr, [sp], #4
 8005178:	b003      	add	sp, #12
 800517a:	4770      	bx	lr
 800517c:	20000064 	.word	0x20000064

08005180 <_sbrk_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d06      	ldr	r5, [pc, #24]	; (800519c <_sbrk_r+0x1c>)
 8005184:	2300      	movs	r3, #0
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	f7fb fbb4 	bl	80008f8 <_sbrk>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_sbrk_r+0x1a>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_sbrk_r+0x1a>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20000364 	.word	0x20000364

080051a0 <abort>:
 80051a0:	b508      	push	{r3, lr}
 80051a2:	2006      	movs	r0, #6
 80051a4:	f000 fb94 	bl	80058d0 <raise>
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7fb fb2d 	bl	8000808 <_exit>

080051ae <__sfputc_r>:
 80051ae:	6893      	ldr	r3, [r2, #8]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	b410      	push	{r4}
 80051b6:	6093      	str	r3, [r2, #8]
 80051b8:	da08      	bge.n	80051cc <__sfputc_r+0x1e>
 80051ba:	6994      	ldr	r4, [r2, #24]
 80051bc:	42a3      	cmp	r3, r4
 80051be:	db01      	blt.n	80051c4 <__sfputc_r+0x16>
 80051c0:	290a      	cmp	r1, #10
 80051c2:	d103      	bne.n	80051cc <__sfputc_r+0x1e>
 80051c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051c8:	f000 bac4 	b.w	8005754 <__swbuf_r>
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	1c58      	adds	r0, r3, #1
 80051d0:	6010      	str	r0, [r2, #0]
 80051d2:	7019      	strb	r1, [r3, #0]
 80051d4:	4608      	mov	r0, r1
 80051d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051da:	4770      	bx	lr

080051dc <__sfputs_r>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	4606      	mov	r6, r0
 80051e0:	460f      	mov	r7, r1
 80051e2:	4614      	mov	r4, r2
 80051e4:	18d5      	adds	r5, r2, r3
 80051e6:	42ac      	cmp	r4, r5
 80051e8:	d101      	bne.n	80051ee <__sfputs_r+0x12>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e007      	b.n	80051fe <__sfputs_r+0x22>
 80051ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f2:	463a      	mov	r2, r7
 80051f4:	4630      	mov	r0, r6
 80051f6:	f7ff ffda 	bl	80051ae <__sfputc_r>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	d1f3      	bne.n	80051e6 <__sfputs_r+0xa>
 80051fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005200 <_vfiprintf_r>:
 8005200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	460d      	mov	r5, r1
 8005206:	b09d      	sub	sp, #116	; 0x74
 8005208:	4614      	mov	r4, r2
 800520a:	4698      	mov	r8, r3
 800520c:	4606      	mov	r6, r0
 800520e:	b118      	cbz	r0, 8005218 <_vfiprintf_r+0x18>
 8005210:	6a03      	ldr	r3, [r0, #32]
 8005212:	b90b      	cbnz	r3, 8005218 <_vfiprintf_r+0x18>
 8005214:	f7ff fcd2 	bl	8004bbc <__sinit>
 8005218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800521a:	07d9      	lsls	r1, r3, #31
 800521c:	d405      	bmi.n	800522a <_vfiprintf_r+0x2a>
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	059a      	lsls	r2, r3, #22
 8005222:	d402      	bmi.n	800522a <_vfiprintf_r+0x2a>
 8005224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005226:	f7ff fdbc 	bl	8004da2 <__retarget_lock_acquire_recursive>
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	d501      	bpl.n	8005234 <_vfiprintf_r+0x34>
 8005230:	692b      	ldr	r3, [r5, #16]
 8005232:	b99b      	cbnz	r3, 800525c <_vfiprintf_r+0x5c>
 8005234:	4629      	mov	r1, r5
 8005236:	4630      	mov	r0, r6
 8005238:	f000 faca 	bl	80057d0 <__swsetup_r>
 800523c:	b170      	cbz	r0, 800525c <_vfiprintf_r+0x5c>
 800523e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005240:	07dc      	lsls	r4, r3, #31
 8005242:	d504      	bpl.n	800524e <_vfiprintf_r+0x4e>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	b01d      	add	sp, #116	; 0x74
 800524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524e:	89ab      	ldrh	r3, [r5, #12]
 8005250:	0598      	lsls	r0, r3, #22
 8005252:	d4f7      	bmi.n	8005244 <_vfiprintf_r+0x44>
 8005254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005256:	f7ff fda5 	bl	8004da4 <__retarget_lock_release_recursive>
 800525a:	e7f3      	b.n	8005244 <_vfiprintf_r+0x44>
 800525c:	2300      	movs	r3, #0
 800525e:	9309      	str	r3, [sp, #36]	; 0x24
 8005260:	2320      	movs	r3, #32
 8005262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005266:	f8cd 800c 	str.w	r8, [sp, #12]
 800526a:	2330      	movs	r3, #48	; 0x30
 800526c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005420 <_vfiprintf_r+0x220>
 8005270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005274:	f04f 0901 	mov.w	r9, #1
 8005278:	4623      	mov	r3, r4
 800527a:	469a      	mov	sl, r3
 800527c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005280:	b10a      	cbz	r2, 8005286 <_vfiprintf_r+0x86>
 8005282:	2a25      	cmp	r2, #37	; 0x25
 8005284:	d1f9      	bne.n	800527a <_vfiprintf_r+0x7a>
 8005286:	ebba 0b04 	subs.w	fp, sl, r4
 800528a:	d00b      	beq.n	80052a4 <_vfiprintf_r+0xa4>
 800528c:	465b      	mov	r3, fp
 800528e:	4622      	mov	r2, r4
 8005290:	4629      	mov	r1, r5
 8005292:	4630      	mov	r0, r6
 8005294:	f7ff ffa2 	bl	80051dc <__sfputs_r>
 8005298:	3001      	adds	r0, #1
 800529a:	f000 80a9 	beq.w	80053f0 <_vfiprintf_r+0x1f0>
 800529e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052a0:	445a      	add	r2, fp
 80052a2:	9209      	str	r2, [sp, #36]	; 0x24
 80052a4:	f89a 3000 	ldrb.w	r3, [sl]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a1 	beq.w	80053f0 <_vfiprintf_r+0x1f0>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295
 80052b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b8:	f10a 0a01 	add.w	sl, sl, #1
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052c4:	931a      	str	r3, [sp, #104]	; 0x68
 80052c6:	4654      	mov	r4, sl
 80052c8:	2205      	movs	r2, #5
 80052ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ce:	4854      	ldr	r0, [pc, #336]	; (8005420 <_vfiprintf_r+0x220>)
 80052d0:	f7fa ffa6 	bl	8000220 <memchr>
 80052d4:	9a04      	ldr	r2, [sp, #16]
 80052d6:	b9d8      	cbnz	r0, 8005310 <_vfiprintf_r+0x110>
 80052d8:	06d1      	lsls	r1, r2, #27
 80052da:	bf44      	itt	mi
 80052dc:	2320      	movmi	r3, #32
 80052de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e2:	0713      	lsls	r3, r2, #28
 80052e4:	bf44      	itt	mi
 80052e6:	232b      	movmi	r3, #43	; 0x2b
 80052e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ec:	f89a 3000 	ldrb.w	r3, [sl]
 80052f0:	2b2a      	cmp	r3, #42	; 0x2a
 80052f2:	d015      	beq.n	8005320 <_vfiprintf_r+0x120>
 80052f4:	9a07      	ldr	r2, [sp, #28]
 80052f6:	4654      	mov	r4, sl
 80052f8:	2000      	movs	r0, #0
 80052fa:	f04f 0c0a 	mov.w	ip, #10
 80052fe:	4621      	mov	r1, r4
 8005300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005304:	3b30      	subs	r3, #48	; 0x30
 8005306:	2b09      	cmp	r3, #9
 8005308:	d94d      	bls.n	80053a6 <_vfiprintf_r+0x1a6>
 800530a:	b1b0      	cbz	r0, 800533a <_vfiprintf_r+0x13a>
 800530c:	9207      	str	r2, [sp, #28]
 800530e:	e014      	b.n	800533a <_vfiprintf_r+0x13a>
 8005310:	eba0 0308 	sub.w	r3, r0, r8
 8005314:	fa09 f303 	lsl.w	r3, r9, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	46a2      	mov	sl, r4
 800531e:	e7d2      	b.n	80052c6 <_vfiprintf_r+0xc6>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	1d19      	adds	r1, r3, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	9103      	str	r1, [sp, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	bfbb      	ittet	lt
 800532c:	425b      	neglt	r3, r3
 800532e:	f042 0202 	orrlt.w	r2, r2, #2
 8005332:	9307      	strge	r3, [sp, #28]
 8005334:	9307      	strlt	r3, [sp, #28]
 8005336:	bfb8      	it	lt
 8005338:	9204      	strlt	r2, [sp, #16]
 800533a:	7823      	ldrb	r3, [r4, #0]
 800533c:	2b2e      	cmp	r3, #46	; 0x2e
 800533e:	d10c      	bne.n	800535a <_vfiprintf_r+0x15a>
 8005340:	7863      	ldrb	r3, [r4, #1]
 8005342:	2b2a      	cmp	r3, #42	; 0x2a
 8005344:	d134      	bne.n	80053b0 <_vfiprintf_r+0x1b0>
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	9203      	str	r2, [sp, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfb8      	it	lt
 8005352:	f04f 33ff 	movlt.w	r3, #4294967295
 8005356:	3402      	adds	r4, #2
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005430 <_vfiprintf_r+0x230>
 800535e:	7821      	ldrb	r1, [r4, #0]
 8005360:	2203      	movs	r2, #3
 8005362:	4650      	mov	r0, sl
 8005364:	f7fa ff5c 	bl	8000220 <memchr>
 8005368:	b138      	cbz	r0, 800537a <_vfiprintf_r+0x17a>
 800536a:	9b04      	ldr	r3, [sp, #16]
 800536c:	eba0 000a 	sub.w	r0, r0, sl
 8005370:	2240      	movs	r2, #64	; 0x40
 8005372:	4082      	lsls	r2, r0
 8005374:	4313      	orrs	r3, r2
 8005376:	3401      	adds	r4, #1
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537e:	4829      	ldr	r0, [pc, #164]	; (8005424 <_vfiprintf_r+0x224>)
 8005380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005384:	2206      	movs	r2, #6
 8005386:	f7fa ff4b 	bl	8000220 <memchr>
 800538a:	2800      	cmp	r0, #0
 800538c:	d03f      	beq.n	800540e <_vfiprintf_r+0x20e>
 800538e:	4b26      	ldr	r3, [pc, #152]	; (8005428 <_vfiprintf_r+0x228>)
 8005390:	bb1b      	cbnz	r3, 80053da <_vfiprintf_r+0x1da>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	3307      	adds	r3, #7
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	3308      	adds	r3, #8
 800539c:	9303      	str	r3, [sp, #12]
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	443b      	add	r3, r7
 80053a2:	9309      	str	r3, [sp, #36]	; 0x24
 80053a4:	e768      	b.n	8005278 <_vfiprintf_r+0x78>
 80053a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053aa:	460c      	mov	r4, r1
 80053ac:	2001      	movs	r0, #1
 80053ae:	e7a6      	b.n	80052fe <_vfiprintf_r+0xfe>
 80053b0:	2300      	movs	r3, #0
 80053b2:	3401      	adds	r4, #1
 80053b4:	9305      	str	r3, [sp, #20]
 80053b6:	4619      	mov	r1, r3
 80053b8:	f04f 0c0a 	mov.w	ip, #10
 80053bc:	4620      	mov	r0, r4
 80053be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053c2:	3a30      	subs	r2, #48	; 0x30
 80053c4:	2a09      	cmp	r2, #9
 80053c6:	d903      	bls.n	80053d0 <_vfiprintf_r+0x1d0>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0c6      	beq.n	800535a <_vfiprintf_r+0x15a>
 80053cc:	9105      	str	r1, [sp, #20]
 80053ce:	e7c4      	b.n	800535a <_vfiprintf_r+0x15a>
 80053d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053d4:	4604      	mov	r4, r0
 80053d6:	2301      	movs	r3, #1
 80053d8:	e7f0      	b.n	80053bc <_vfiprintf_r+0x1bc>
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <_vfiprintf_r+0x22c>)
 80053e2:	a904      	add	r1, sp, #16
 80053e4:	4630      	mov	r0, r6
 80053e6:	f3af 8000 	nop.w
 80053ea:	4607      	mov	r7, r0
 80053ec:	1c78      	adds	r0, r7, #1
 80053ee:	d1d6      	bne.n	800539e <_vfiprintf_r+0x19e>
 80053f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f2:	07d9      	lsls	r1, r3, #31
 80053f4:	d405      	bmi.n	8005402 <_vfiprintf_r+0x202>
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	059a      	lsls	r2, r3, #22
 80053fa:	d402      	bmi.n	8005402 <_vfiprintf_r+0x202>
 80053fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053fe:	f7ff fcd1 	bl	8004da4 <__retarget_lock_release_recursive>
 8005402:	89ab      	ldrh	r3, [r5, #12]
 8005404:	065b      	lsls	r3, r3, #25
 8005406:	f53f af1d 	bmi.w	8005244 <_vfiprintf_r+0x44>
 800540a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540c:	e71c      	b.n	8005248 <_vfiprintf_r+0x48>
 800540e:	ab03      	add	r3, sp, #12
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	462a      	mov	r2, r5
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <_vfiprintf_r+0x22c>)
 8005416:	a904      	add	r1, sp, #16
 8005418:	4630      	mov	r0, r6
 800541a:	f000 f879 	bl	8005510 <_printf_i>
 800541e:	e7e4      	b.n	80053ea <_vfiprintf_r+0x1ea>
 8005420:	08005b13 	.word	0x08005b13
 8005424:	08005b1d 	.word	0x08005b1d
 8005428:	00000000 	.word	0x00000000
 800542c:	080051dd 	.word	0x080051dd
 8005430:	08005b19 	.word	0x08005b19

08005434 <_printf_common>:
 8005434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005438:	4616      	mov	r6, r2
 800543a:	4699      	mov	r9, r3
 800543c:	688a      	ldr	r2, [r1, #8]
 800543e:	690b      	ldr	r3, [r1, #16]
 8005440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005444:	4293      	cmp	r3, r2
 8005446:	bfb8      	it	lt
 8005448:	4613      	movlt	r3, r2
 800544a:	6033      	str	r3, [r6, #0]
 800544c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005450:	4607      	mov	r7, r0
 8005452:	460c      	mov	r4, r1
 8005454:	b10a      	cbz	r2, 800545a <_printf_common+0x26>
 8005456:	3301      	adds	r3, #1
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	0699      	lsls	r1, r3, #26
 800545e:	bf42      	ittt	mi
 8005460:	6833      	ldrmi	r3, [r6, #0]
 8005462:	3302      	addmi	r3, #2
 8005464:	6033      	strmi	r3, [r6, #0]
 8005466:	6825      	ldr	r5, [r4, #0]
 8005468:	f015 0506 	ands.w	r5, r5, #6
 800546c:	d106      	bne.n	800547c <_printf_common+0x48>
 800546e:	f104 0a19 	add.w	sl, r4, #25
 8005472:	68e3      	ldr	r3, [r4, #12]
 8005474:	6832      	ldr	r2, [r6, #0]
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	42ab      	cmp	r3, r5
 800547a:	dc26      	bgt.n	80054ca <_printf_common+0x96>
 800547c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005480:	1e13      	subs	r3, r2, #0
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	bf18      	it	ne
 8005486:	2301      	movne	r3, #1
 8005488:	0692      	lsls	r2, r2, #26
 800548a:	d42b      	bmi.n	80054e4 <_printf_common+0xb0>
 800548c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005490:	4649      	mov	r1, r9
 8005492:	4638      	mov	r0, r7
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d01e      	beq.n	80054d8 <_printf_common+0xa4>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	6922      	ldr	r2, [r4, #16]
 800549e:	f003 0306 	and.w	r3, r3, #6
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	bf02      	ittt	eq
 80054a6:	68e5      	ldreq	r5, [r4, #12]
 80054a8:	6833      	ldreq	r3, [r6, #0]
 80054aa:	1aed      	subeq	r5, r5, r3
 80054ac:	68a3      	ldr	r3, [r4, #8]
 80054ae:	bf0c      	ite	eq
 80054b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b4:	2500      	movne	r5, #0
 80054b6:	4293      	cmp	r3, r2
 80054b8:	bfc4      	itt	gt
 80054ba:	1a9b      	subgt	r3, r3, r2
 80054bc:	18ed      	addgt	r5, r5, r3
 80054be:	2600      	movs	r6, #0
 80054c0:	341a      	adds	r4, #26
 80054c2:	42b5      	cmp	r5, r6
 80054c4:	d11a      	bne.n	80054fc <_printf_common+0xc8>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e008      	b.n	80054dc <_printf_common+0xa8>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4652      	mov	r2, sl
 80054ce:	4649      	mov	r1, r9
 80054d0:	4638      	mov	r0, r7
 80054d2:	47c0      	blx	r8
 80054d4:	3001      	adds	r0, #1
 80054d6:	d103      	bne.n	80054e0 <_printf_common+0xac>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	3501      	adds	r5, #1
 80054e2:	e7c6      	b.n	8005472 <_printf_common+0x3e>
 80054e4:	18e1      	adds	r1, r4, r3
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	2030      	movs	r0, #48	; 0x30
 80054ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ee:	4422      	add	r2, r4
 80054f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f8:	3302      	adds	r3, #2
 80054fa:	e7c7      	b.n	800548c <_printf_common+0x58>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4622      	mov	r2, r4
 8005500:	4649      	mov	r1, r9
 8005502:	4638      	mov	r0, r7
 8005504:	47c0      	blx	r8
 8005506:	3001      	adds	r0, #1
 8005508:	d0e6      	beq.n	80054d8 <_printf_common+0xa4>
 800550a:	3601      	adds	r6, #1
 800550c:	e7d9      	b.n	80054c2 <_printf_common+0x8e>
	...

08005510 <_printf_i>:
 8005510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	7e0f      	ldrb	r7, [r1, #24]
 8005516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005518:	2f78      	cmp	r7, #120	; 0x78
 800551a:	4691      	mov	r9, r2
 800551c:	4680      	mov	r8, r0
 800551e:	460c      	mov	r4, r1
 8005520:	469a      	mov	sl, r3
 8005522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005526:	d807      	bhi.n	8005538 <_printf_i+0x28>
 8005528:	2f62      	cmp	r7, #98	; 0x62
 800552a:	d80a      	bhi.n	8005542 <_printf_i+0x32>
 800552c:	2f00      	cmp	r7, #0
 800552e:	f000 80d4 	beq.w	80056da <_printf_i+0x1ca>
 8005532:	2f58      	cmp	r7, #88	; 0x58
 8005534:	f000 80c0 	beq.w	80056b8 <_printf_i+0x1a8>
 8005538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800553c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005540:	e03a      	b.n	80055b8 <_printf_i+0xa8>
 8005542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005546:	2b15      	cmp	r3, #21
 8005548:	d8f6      	bhi.n	8005538 <_printf_i+0x28>
 800554a:	a101      	add	r1, pc, #4	; (adr r1, 8005550 <_printf_i+0x40>)
 800554c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005550:	080055a9 	.word	0x080055a9
 8005554:	080055bd 	.word	0x080055bd
 8005558:	08005539 	.word	0x08005539
 800555c:	08005539 	.word	0x08005539
 8005560:	08005539 	.word	0x08005539
 8005564:	08005539 	.word	0x08005539
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005539 	.word	0x08005539
 8005570:	08005539 	.word	0x08005539
 8005574:	08005539 	.word	0x08005539
 8005578:	08005539 	.word	0x08005539
 800557c:	080056c1 	.word	0x080056c1
 8005580:	080055e9 	.word	0x080055e9
 8005584:	0800567b 	.word	0x0800567b
 8005588:	08005539 	.word	0x08005539
 800558c:	08005539 	.word	0x08005539
 8005590:	080056e3 	.word	0x080056e3
 8005594:	08005539 	.word	0x08005539
 8005598:	080055e9 	.word	0x080055e9
 800559c:	08005539 	.word	0x08005539
 80055a0:	08005539 	.word	0x08005539
 80055a4:	08005683 	.word	0x08005683
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	1d1a      	adds	r2, r3, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	602a      	str	r2, [r5, #0]
 80055b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055b8:	2301      	movs	r3, #1
 80055ba:	e09f      	b.n	80056fc <_printf_i+0x1ec>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	0607      	lsls	r7, r0, #24
 80055c2:	f103 0104 	add.w	r1, r3, #4
 80055c6:	6029      	str	r1, [r5, #0]
 80055c8:	d501      	bpl.n	80055ce <_printf_i+0xbe>
 80055ca:	681e      	ldr	r6, [r3, #0]
 80055cc:	e003      	b.n	80055d6 <_printf_i+0xc6>
 80055ce:	0646      	lsls	r6, r0, #25
 80055d0:	d5fb      	bpl.n	80055ca <_printf_i+0xba>
 80055d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	da03      	bge.n	80055e2 <_printf_i+0xd2>
 80055da:	232d      	movs	r3, #45	; 0x2d
 80055dc:	4276      	negs	r6, r6
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e2:	485a      	ldr	r0, [pc, #360]	; (800574c <_printf_i+0x23c>)
 80055e4:	230a      	movs	r3, #10
 80055e6:	e012      	b.n	800560e <_printf_i+0xfe>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	1d19      	adds	r1, r3, #4
 80055ee:	6029      	str	r1, [r5, #0]
 80055f0:	0605      	lsls	r5, r0, #24
 80055f2:	d501      	bpl.n	80055f8 <_printf_i+0xe8>
 80055f4:	681e      	ldr	r6, [r3, #0]
 80055f6:	e002      	b.n	80055fe <_printf_i+0xee>
 80055f8:	0641      	lsls	r1, r0, #25
 80055fa:	d5fb      	bpl.n	80055f4 <_printf_i+0xe4>
 80055fc:	881e      	ldrh	r6, [r3, #0]
 80055fe:	4853      	ldr	r0, [pc, #332]	; (800574c <_printf_i+0x23c>)
 8005600:	2f6f      	cmp	r7, #111	; 0x6f
 8005602:	bf0c      	ite	eq
 8005604:	2308      	moveq	r3, #8
 8005606:	230a      	movne	r3, #10
 8005608:	2100      	movs	r1, #0
 800560a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800560e:	6865      	ldr	r5, [r4, #4]
 8005610:	60a5      	str	r5, [r4, #8]
 8005612:	2d00      	cmp	r5, #0
 8005614:	bfa2      	ittt	ge
 8005616:	6821      	ldrge	r1, [r4, #0]
 8005618:	f021 0104 	bicge.w	r1, r1, #4
 800561c:	6021      	strge	r1, [r4, #0]
 800561e:	b90e      	cbnz	r6, 8005624 <_printf_i+0x114>
 8005620:	2d00      	cmp	r5, #0
 8005622:	d04b      	beq.n	80056bc <_printf_i+0x1ac>
 8005624:	4615      	mov	r5, r2
 8005626:	fbb6 f1f3 	udiv	r1, r6, r3
 800562a:	fb03 6711 	mls	r7, r3, r1, r6
 800562e:	5dc7      	ldrb	r7, [r0, r7]
 8005630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005634:	4637      	mov	r7, r6
 8005636:	42bb      	cmp	r3, r7
 8005638:	460e      	mov	r6, r1
 800563a:	d9f4      	bls.n	8005626 <_printf_i+0x116>
 800563c:	2b08      	cmp	r3, #8
 800563e:	d10b      	bne.n	8005658 <_printf_i+0x148>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	07de      	lsls	r6, r3, #31
 8005644:	d508      	bpl.n	8005658 <_printf_i+0x148>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	6861      	ldr	r1, [r4, #4]
 800564a:	4299      	cmp	r1, r3
 800564c:	bfde      	ittt	le
 800564e:	2330      	movle	r3, #48	; 0x30
 8005650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005658:	1b52      	subs	r2, r2, r5
 800565a:	6122      	str	r2, [r4, #16]
 800565c:	f8cd a000 	str.w	sl, [sp]
 8005660:	464b      	mov	r3, r9
 8005662:	aa03      	add	r2, sp, #12
 8005664:	4621      	mov	r1, r4
 8005666:	4640      	mov	r0, r8
 8005668:	f7ff fee4 	bl	8005434 <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	d14a      	bne.n	8005706 <_printf_i+0x1f6>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b004      	add	sp, #16
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	4833      	ldr	r0, [pc, #204]	; (8005750 <_printf_i+0x240>)
 8005684:	2778      	movs	r7, #120	; 0x78
 8005686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	6829      	ldr	r1, [r5, #0]
 800568e:	061f      	lsls	r7, r3, #24
 8005690:	f851 6b04 	ldr.w	r6, [r1], #4
 8005694:	d402      	bmi.n	800569c <_printf_i+0x18c>
 8005696:	065f      	lsls	r7, r3, #25
 8005698:	bf48      	it	mi
 800569a:	b2b6      	uxthmi	r6, r6
 800569c:	07df      	lsls	r7, r3, #31
 800569e:	bf48      	it	mi
 80056a0:	f043 0320 	orrmi.w	r3, r3, #32
 80056a4:	6029      	str	r1, [r5, #0]
 80056a6:	bf48      	it	mi
 80056a8:	6023      	strmi	r3, [r4, #0]
 80056aa:	b91e      	cbnz	r6, 80056b4 <_printf_i+0x1a4>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	f023 0320 	bic.w	r3, r3, #32
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	2310      	movs	r3, #16
 80056b6:	e7a7      	b.n	8005608 <_printf_i+0xf8>
 80056b8:	4824      	ldr	r0, [pc, #144]	; (800574c <_printf_i+0x23c>)
 80056ba:	e7e4      	b.n	8005686 <_printf_i+0x176>
 80056bc:	4615      	mov	r5, r2
 80056be:	e7bd      	b.n	800563c <_printf_i+0x12c>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	6826      	ldr	r6, [r4, #0]
 80056c4:	6961      	ldr	r1, [r4, #20]
 80056c6:	1d18      	adds	r0, r3, #4
 80056c8:	6028      	str	r0, [r5, #0]
 80056ca:	0635      	lsls	r5, r6, #24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0x1c4>
 80056d0:	6019      	str	r1, [r3, #0]
 80056d2:	e002      	b.n	80056da <_printf_i+0x1ca>
 80056d4:	0670      	lsls	r0, r6, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0x1c0>
 80056d8:	8019      	strh	r1, [r3, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	4615      	mov	r5, r2
 80056e0:	e7bc      	b.n	800565c <_printf_i+0x14c>
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	1d1a      	adds	r2, r3, #4
 80056e6:	602a      	str	r2, [r5, #0]
 80056e8:	681d      	ldr	r5, [r3, #0]
 80056ea:	6862      	ldr	r2, [r4, #4]
 80056ec:	2100      	movs	r1, #0
 80056ee:	4628      	mov	r0, r5
 80056f0:	f7fa fd96 	bl	8000220 <memchr>
 80056f4:	b108      	cbz	r0, 80056fa <_printf_i+0x1ea>
 80056f6:	1b40      	subs	r0, r0, r5
 80056f8:	6060      	str	r0, [r4, #4]
 80056fa:	6863      	ldr	r3, [r4, #4]
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	2300      	movs	r3, #0
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	e7aa      	b.n	800565c <_printf_i+0x14c>
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	462a      	mov	r2, r5
 800570a:	4649      	mov	r1, r9
 800570c:	4640      	mov	r0, r8
 800570e:	47d0      	blx	sl
 8005710:	3001      	adds	r0, #1
 8005712:	d0ad      	beq.n	8005670 <_printf_i+0x160>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	079b      	lsls	r3, r3, #30
 8005718:	d413      	bmi.n	8005742 <_printf_i+0x232>
 800571a:	68e0      	ldr	r0, [r4, #12]
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	4298      	cmp	r0, r3
 8005720:	bfb8      	it	lt
 8005722:	4618      	movlt	r0, r3
 8005724:	e7a6      	b.n	8005674 <_printf_i+0x164>
 8005726:	2301      	movs	r3, #1
 8005728:	4632      	mov	r2, r6
 800572a:	4649      	mov	r1, r9
 800572c:	4640      	mov	r0, r8
 800572e:	47d0      	blx	sl
 8005730:	3001      	adds	r0, #1
 8005732:	d09d      	beq.n	8005670 <_printf_i+0x160>
 8005734:	3501      	adds	r5, #1
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	9903      	ldr	r1, [sp, #12]
 800573a:	1a5b      	subs	r3, r3, r1
 800573c:	42ab      	cmp	r3, r5
 800573e:	dcf2      	bgt.n	8005726 <_printf_i+0x216>
 8005740:	e7eb      	b.n	800571a <_printf_i+0x20a>
 8005742:	2500      	movs	r5, #0
 8005744:	f104 0619 	add.w	r6, r4, #25
 8005748:	e7f5      	b.n	8005736 <_printf_i+0x226>
 800574a:	bf00      	nop
 800574c:	08005b24 	.word	0x08005b24
 8005750:	08005b35 	.word	0x08005b35

08005754 <__swbuf_r>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	460e      	mov	r6, r1
 8005758:	4614      	mov	r4, r2
 800575a:	4605      	mov	r5, r0
 800575c:	b118      	cbz	r0, 8005766 <__swbuf_r+0x12>
 800575e:	6a03      	ldr	r3, [r0, #32]
 8005760:	b90b      	cbnz	r3, 8005766 <__swbuf_r+0x12>
 8005762:	f7ff fa2b 	bl	8004bbc <__sinit>
 8005766:	69a3      	ldr	r3, [r4, #24]
 8005768:	60a3      	str	r3, [r4, #8]
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	071a      	lsls	r2, r3, #28
 800576e:	d525      	bpl.n	80057bc <__swbuf_r+0x68>
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	b31b      	cbz	r3, 80057bc <__swbuf_r+0x68>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	6922      	ldr	r2, [r4, #16]
 8005778:	1a98      	subs	r0, r3, r2
 800577a:	6963      	ldr	r3, [r4, #20]
 800577c:	b2f6      	uxtb	r6, r6
 800577e:	4283      	cmp	r3, r0
 8005780:	4637      	mov	r7, r6
 8005782:	dc04      	bgt.n	800578e <__swbuf_r+0x3a>
 8005784:	4621      	mov	r1, r4
 8005786:	4628      	mov	r0, r5
 8005788:	f7ff fcc0 	bl	800510c <_fflush_r>
 800578c:	b9e0      	cbnz	r0, 80057c8 <__swbuf_r+0x74>
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	3b01      	subs	r3, #1
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	6022      	str	r2, [r4, #0]
 800579a:	701e      	strb	r6, [r3, #0]
 800579c:	6962      	ldr	r2, [r4, #20]
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d004      	beq.n	80057ae <__swbuf_r+0x5a>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	07db      	lsls	r3, r3, #31
 80057a8:	d506      	bpl.n	80057b8 <__swbuf_r+0x64>
 80057aa:	2e0a      	cmp	r6, #10
 80057ac:	d104      	bne.n	80057b8 <__swbuf_r+0x64>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	f7ff fcab 	bl	800510c <_fflush_r>
 80057b6:	b938      	cbnz	r0, 80057c8 <__swbuf_r+0x74>
 80057b8:	4638      	mov	r0, r7
 80057ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f806 	bl	80057d0 <__swsetup_r>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d0d5      	beq.n	8005774 <__swbuf_r+0x20>
 80057c8:	f04f 37ff 	mov.w	r7, #4294967295
 80057cc:	e7f4      	b.n	80057b8 <__swbuf_r+0x64>
	...

080057d0 <__swsetup_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <__swsetup_r+0xac>)
 80057d4:	4605      	mov	r5, r0
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	460c      	mov	r4, r1
 80057da:	b118      	cbz	r0, 80057e4 <__swsetup_r+0x14>
 80057dc:	6a03      	ldr	r3, [r0, #32]
 80057de:	b90b      	cbnz	r3, 80057e4 <__swsetup_r+0x14>
 80057e0:	f7ff f9ec 	bl	8004bbc <__sinit>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ea:	0718      	lsls	r0, r3, #28
 80057ec:	d422      	bmi.n	8005834 <__swsetup_r+0x64>
 80057ee:	06d9      	lsls	r1, r3, #27
 80057f0:	d407      	bmi.n	8005802 <__swsetup_r+0x32>
 80057f2:	2309      	movs	r3, #9
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	e034      	b.n	800586c <__swsetup_r+0x9c>
 8005802:	0758      	lsls	r0, r3, #29
 8005804:	d512      	bpl.n	800582c <__swsetup_r+0x5c>
 8005806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005808:	b141      	cbz	r1, 800581c <__swsetup_r+0x4c>
 800580a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800580e:	4299      	cmp	r1, r3
 8005810:	d002      	beq.n	8005818 <__swsetup_r+0x48>
 8005812:	4628      	mov	r0, r5
 8005814:	f7ff faf4 	bl	8004e00 <_free_r>
 8005818:	2300      	movs	r3, #0
 800581a:	6363      	str	r3, [r4, #52]	; 0x34
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	2300      	movs	r3, #0
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f043 0308 	orr.w	r3, r3, #8
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	b94b      	cbnz	r3, 800584c <__swsetup_r+0x7c>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800583e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005842:	d003      	beq.n	800584c <__swsetup_r+0x7c>
 8005844:	4621      	mov	r1, r4
 8005846:	4628      	mov	r0, r5
 8005848:	f000 f884 	bl	8005954 <__smakebuf_r>
 800584c:	89a0      	ldrh	r0, [r4, #12]
 800584e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005852:	f010 0301 	ands.w	r3, r0, #1
 8005856:	d00a      	beq.n	800586e <__swsetup_r+0x9e>
 8005858:	2300      	movs	r3, #0
 800585a:	60a3      	str	r3, [r4, #8]
 800585c:	6963      	ldr	r3, [r4, #20]
 800585e:	425b      	negs	r3, r3
 8005860:	61a3      	str	r3, [r4, #24]
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	b943      	cbnz	r3, 8005878 <__swsetup_r+0xa8>
 8005866:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800586a:	d1c4      	bne.n	80057f6 <__swsetup_r+0x26>
 800586c:	bd38      	pop	{r3, r4, r5, pc}
 800586e:	0781      	lsls	r1, r0, #30
 8005870:	bf58      	it	pl
 8005872:	6963      	ldrpl	r3, [r4, #20]
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	e7f4      	b.n	8005862 <__swsetup_r+0x92>
 8005878:	2000      	movs	r0, #0
 800587a:	e7f7      	b.n	800586c <__swsetup_r+0x9c>
 800587c:	20000064 	.word	0x20000064

08005880 <_raise_r>:
 8005880:	291f      	cmp	r1, #31
 8005882:	b538      	push	{r3, r4, r5, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	460d      	mov	r5, r1
 8005888:	d904      	bls.n	8005894 <_raise_r+0x14>
 800588a:	2316      	movs	r3, #22
 800588c:	6003      	str	r3, [r0, #0]
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005896:	b112      	cbz	r2, 800589e <_raise_r+0x1e>
 8005898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800589c:	b94b      	cbnz	r3, 80058b2 <_raise_r+0x32>
 800589e:	4620      	mov	r0, r4
 80058a0:	f000 f830 	bl	8005904 <_getpid_r>
 80058a4:	462a      	mov	r2, r5
 80058a6:	4601      	mov	r1, r0
 80058a8:	4620      	mov	r0, r4
 80058aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ae:	f000 b817 	b.w	80058e0 <_kill_r>
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d00a      	beq.n	80058cc <_raise_r+0x4c>
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	d103      	bne.n	80058c2 <_raise_r+0x42>
 80058ba:	2316      	movs	r3, #22
 80058bc:	6003      	str	r3, [r0, #0]
 80058be:	2001      	movs	r0, #1
 80058c0:	e7e7      	b.n	8005892 <_raise_r+0x12>
 80058c2:	2400      	movs	r4, #0
 80058c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058c8:	4628      	mov	r0, r5
 80058ca:	4798      	blx	r3
 80058cc:	2000      	movs	r0, #0
 80058ce:	e7e0      	b.n	8005892 <_raise_r+0x12>

080058d0 <raise>:
 80058d0:	4b02      	ldr	r3, [pc, #8]	; (80058dc <raise+0xc>)
 80058d2:	4601      	mov	r1, r0
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	f7ff bfd3 	b.w	8005880 <_raise_r>
 80058da:	bf00      	nop
 80058dc:	20000064 	.word	0x20000064

080058e0 <_kill_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	; (8005900 <_kill_r+0x20>)
 80058e4:	2300      	movs	r3, #0
 80058e6:	4604      	mov	r4, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	f7fa ff7b 	bl	80007e8 <_kill>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	d102      	bne.n	80058fc <_kill_r+0x1c>
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	b103      	cbz	r3, 80058fc <_kill_r+0x1c>
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	bd38      	pop	{r3, r4, r5, pc}
 80058fe:	bf00      	nop
 8005900:	20000364 	.word	0x20000364

08005904 <_getpid_r>:
 8005904:	f7fa bf68 	b.w	80007d8 <_getpid>

08005908 <__swhatbuf_r>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	460c      	mov	r4, r1
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	2900      	cmp	r1, #0
 8005912:	b096      	sub	sp, #88	; 0x58
 8005914:	4615      	mov	r5, r2
 8005916:	461e      	mov	r6, r3
 8005918:	da0d      	bge.n	8005936 <__swhatbuf_r+0x2e>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	bf0c      	ite	eq
 8005926:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800592a:	2340      	movne	r3, #64	; 0x40
 800592c:	2000      	movs	r0, #0
 800592e:	6031      	str	r1, [r6, #0]
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	b016      	add	sp, #88	; 0x58
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	466a      	mov	r2, sp
 8005938:	f000 f848 	bl	80059cc <_fstat_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	dbec      	blt.n	800591a <__swhatbuf_r+0x12>
 8005940:	9901      	ldr	r1, [sp, #4]
 8005942:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005946:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800594a:	4259      	negs	r1, r3
 800594c:	4159      	adcs	r1, r3
 800594e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005952:	e7eb      	b.n	800592c <__swhatbuf_r+0x24>

08005954 <__smakebuf_r>:
 8005954:	898b      	ldrh	r3, [r1, #12]
 8005956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005958:	079d      	lsls	r5, r3, #30
 800595a:	4606      	mov	r6, r0
 800595c:	460c      	mov	r4, r1
 800595e:	d507      	bpl.n	8005970 <__smakebuf_r+0x1c>
 8005960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	2301      	movs	r3, #1
 800596a:	6163      	str	r3, [r4, #20]
 800596c:	b002      	add	sp, #8
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	ab01      	add	r3, sp, #4
 8005972:	466a      	mov	r2, sp
 8005974:	f7ff ffc8 	bl	8005908 <__swhatbuf_r>
 8005978:	9900      	ldr	r1, [sp, #0]
 800597a:	4605      	mov	r5, r0
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff fab3 	bl	8004ee8 <_malloc_r>
 8005982:	b948      	cbnz	r0, 8005998 <__smakebuf_r+0x44>
 8005984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005988:	059a      	lsls	r2, r3, #22
 800598a:	d4ef      	bmi.n	800596c <__smakebuf_r+0x18>
 800598c:	f023 0303 	bic.w	r3, r3, #3
 8005990:	f043 0302 	orr.w	r3, r3, #2
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	e7e3      	b.n	8005960 <__smakebuf_r+0xc>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	6020      	str	r0, [r4, #0]
 800599c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	9b00      	ldr	r3, [sp, #0]
 80059a4:	6163      	str	r3, [r4, #20]
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	6120      	str	r0, [r4, #16]
 80059aa:	b15b      	cbz	r3, 80059c4 <__smakebuf_r+0x70>
 80059ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f81d 	bl	80059f0 <_isatty_r>
 80059b6:	b128      	cbz	r0, 80059c4 <__smakebuf_r+0x70>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	431d      	orrs	r5, r3
 80059c8:	81a5      	strh	r5, [r4, #12]
 80059ca:	e7cf      	b.n	800596c <__smakebuf_r+0x18>

080059cc <_fstat_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	; (80059ec <_fstat_r+0x20>)
 80059d0:	2300      	movs	r3, #0
 80059d2:	4604      	mov	r4, r0
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	f7fa ff64 	bl	80008a6 <_fstat>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	d102      	bne.n	80059e8 <_fstat_r+0x1c>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	b103      	cbz	r3, 80059e8 <_fstat_r+0x1c>
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	bd38      	pop	{r3, r4, r5, pc}
 80059ea:	bf00      	nop
 80059ec:	20000364 	.word	0x20000364

080059f0 <_isatty_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	; (8005a0c <_isatty_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fa ff63 	bl	80008c6 <_isatty>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_isatty_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_isatty_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20000364 	.word	0x20000364

08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
