
uart_slave_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  080049cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080049cc  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd3c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002274  00000000  00000000  0002ddbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  00030030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000805  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb3c  00000000  00000000  000312bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e80d  00000000  00000000  0004ddf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6118  00000000  00000000  0005c606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000293c  00000000  00000000  00112720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004958 	.word	0x08004958

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004958 	.word	0x08004958

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_GPIO_Init+0x90>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_GPIO_Init+0x94>)
 8000562:	f000 ff39 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_1_Pin;
 8000566:	2301      	movs	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4619      	mov	r1, r3
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <MX_GPIO_Init+0x94>)
 800057a:	f000 fd93 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	4619      	mov	r1, r3
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0x94>)
 8000598:	f000 fd84 	bl	80010a4 <HAL_GPIO_Init>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48000400 	.word	0x48000400

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb37 	bl	8000c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f814 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f7ff ffac 	bl	8000514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 fa1c 	bl	80009f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f9ce 	bl	8000960 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uartCommInit(&huart1);
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <main+0x2c>)
 80005c6:	f000 f917 	bl	80007f8 <uartCommInit>
  pushButtocounter=0;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <main+0x30>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  buttonScan();
 80005d0:	f000 f856 	bl	8000680 <buttonScan>
 80005d4:	e7fc      	b.n	80005d0 <main+0x24>
 80005d6:	bf00      	nop
 80005d8:	200000ac 	.word	0x200000ac
 80005dc:	20000028 	.word	0x20000028

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2238      	movs	r2, #56	; 0x38
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 f978 	bl	80048e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000602:	2000      	movs	r0, #0
 8000604:	f000 ff00 	bl	8001408 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000622:	2355      	movs	r3, #85	; 0x55
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff9a 	bl	8001570 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000642:	f000 f818 	bl	8000676 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fa98 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066a:	f000 f804 	bl	8000676 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067a:	b672      	cpsid	i
}
 800067c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067e:	e7fe      	b.n	800067e <Error_Handler+0x8>

08000680 <buttonScan>:
uint32_t lastDebounceTime = 0;
const uint32_t debounceDelay = 50; // 50 ms debounce delay



void buttonScan(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
    // Read the state of the GPIO pin
    GPIO_PinState pinState = HAL_GPIO_ReadPin(PUSH_BUTTON_1_GPIO_Port, PUSH_BUTTON_1_Pin);
 8000686:	2101      	movs	r1, #1
 8000688:	4822      	ldr	r0, [pc, #136]	; (8000714 <buttonScan+0x94>)
 800068a:	f000 fe8d 	bl	80013a8 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]

    switch (pushButtonstate)
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <buttonScan+0x98>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d012      	beq.n	80006c0 <buttonScan+0x40>
 800069a:	2b02      	cmp	r3, #2
 800069c:	dc35      	bgt.n	800070a <buttonScan+0x8a>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <buttonScan+0x28>
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d025      	beq.n	80006f2 <buttonScan+0x72>
          // Button released, go back to released state
        	pushButtonstate = BUTTON_RELEASED;
        }
        break;
    }
}
 80006a6:	e030      	b.n	800070a <buttonScan+0x8a>
        if (pinState == GPIO_PIN_RESET)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d128      	bne.n	8000700 <buttonScan+0x80>
          lastDebounceTime = HAL_GetTick();
 80006ae:	f000 fb1d 	bl	8000cec <HAL_GetTick>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <buttonScan+0x9c>)
 80006b6:	6013      	str	r3, [r2, #0]
          pushButtonstate = BUTTON_DEBOUNCE;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <buttonScan+0x98>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	701a      	strb	r2, [r3, #0]
        break;
 80006be:	e01f      	b.n	8000700 <buttonScan+0x80>
        if ((HAL_GetTick() - lastDebounceTime) >= debounceDelay)
 80006c0:	f000 fb14 	bl	8000cec <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <buttonScan+0x9c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2232      	movs	r2, #50	; 0x32
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d318      	bcc.n	8000704 <buttonScan+0x84>
          if (pinState == GPIO_PIN_RESET)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d108      	bne.n	80006ea <buttonScan+0x6a>
            pushButtocounter++;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <buttonScan+0xa0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <buttonScan+0xa0>)
 80006e0:	6013      	str	r3, [r2, #0]
            pushButtonstate = BUTTON_PRESSED;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <buttonScan+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
        break;
 80006e8:	e00c      	b.n	8000704 <buttonScan+0x84>
        	  pushButtonstate = BUTTON_RELEASED;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <buttonScan+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
        break;
 80006f0:	e008      	b.n	8000704 <buttonScan+0x84>
        if (pinState == GPIO_PIN_RESET)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d107      	bne.n	8000708 <buttonScan+0x88>
        	pushButtonstate = BUTTON_RELEASED;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <buttonScan+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
        break;
 80006fe:	e003      	b.n	8000708 <buttonScan+0x88>
        break;
 8000700:	bf00      	nop
 8000702:	e002      	b.n	800070a <buttonScan+0x8a>
        break;
 8000704:	bf00      	nop
 8000706:	e000      	b.n	800070a <buttonScan+0x8a>
        break;
 8000708:	bf00      	nop
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	48000400 	.word	0x48000400
 8000718:	20000030 	.word	0x20000030
 800071c:	20000034 	.word	0x20000034
 8000720:	20000028 	.word	0x20000028

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6613      	str	r3, [r2, #96]	; 0x60
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6593      	str	r3, [r2, #88]	; 0x58
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800075a:	f000 fef9 	bl	8001550 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 fa86 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <USART1_IRQHandler+0x10>)
 80007c6:	f001 fed5 	bl	8002574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000ac 	.word	0x200000ac

080007d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <uartCommInit>:

/**
 * @brief Initializes UART communication.
 * @param huart: UART handle
 */
void uartCommInit(UART_HandleTypeDef *huart) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    // Initialize the UART receive interrupt

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxbuff, RX_BUFF_SIZE);
 8000800:	2220      	movs	r2, #32
 8000802:	4904      	ldr	r1, [pc, #16]	; (8000814 <uartCommInit+0x1c>)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <uartCommInit+0x20>)
 8000806:	f003 ffce 	bl	80047a6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000058 	.word	0x20000058
 8000818:	200000ac 	.word	0x200000ac

0800081c <assignSlaveData>:
 * @param hum: Humidity
 * @param lat: Latitude
 * @param lon: Longitude
 * @param altitude: Altitude
 */
void assignSlaveData(SlaveDatatypedef *data, uint32_t id, float temp, float hum, float lat, float lon, uint32_t altitude) {
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	61f8      	str	r0, [r7, #28]
 8000824:	61b9      	str	r1, [r7, #24]
 8000826:	ed87 0a05 	vstr	s0, [r7, #20]
 800082a:	edc7 0a04 	vstr	s1, [r7, #16]
 800082e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000832:	edc7 1a02 	vstr	s3, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    data->first_header = 0xABCD1234; // Example header value
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <assignSlaveData+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
    data->device_id = id;
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	605a      	str	r2, [r3, #4]
    data->temperature = temp;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	609a      	str	r2, [r3, #8]
    data->humidity = hum;
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	60da      	str	r2, [r3, #12]
    data->latitude = lat;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	611a      	str	r2, [r3, #16]
    data->longitude = lon;
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	615a      	str	r2, [r3, #20]
    data->altitude = altitude;
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	619a      	str	r2, [r3, #24]
}
 8000862:	bf00      	nop
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	abcd1234 	.word	0xabcd1234

08000874 <sendSlaveData>:
/**
 * @brief Sends the slave data over UART.
 * @param huart: UART handle
 * @param data: Pointer to SlaveDatatypedef structure
 */
void sendSlaveData(UART_HandleTypeDef *huart, SlaveDatatypedef *data) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
    // Copy the slave data to the transmission buffer
    memcpy(txbuff, data, sizeof(SlaveDatatypedef));
 800087e:	221c      	movs	r2, #28
 8000880:	6839      	ldr	r1, [r7, #0]
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <sendSlaveData+0x28>)
 8000884:	f004 f85a 	bl	800493c <memcpy>
    // Transmit the data over UART
    HAL_UART_Transmit_IT(huart, txbuff, sizeof(SlaveDatatypedef));
 8000888:	221c      	movs	r2, #28
 800088a:	4904      	ldr	r1, [pc, #16]	; (800089c <sendSlaveData+0x28>)
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f001 fddd 	bl	800244c <HAL_UART_Transmit_IT>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000038 	.word	0x20000038

080008a0 <HAL_UARTEx_RxEventCallback>:

/**
 * @brief Callback function for UART receive interrupt.
 * @param huart: UART handle
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80008a0:	b5b0      	push	{r4, r5, r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <HAL_UARTEx_RxEventCallback+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d132      	bne.n	800091c <HAL_UARTEx_RxEventCallback+0x7c>

		rcvDatacounter++;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_UARTEx_RxEventCallback+0x88>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	4a1a      	ldr	r2, [pc, #104]	; (8000928 <HAL_UARTEx_RxEventCallback+0x88>)
 80008be:	6013      	str	r3, [r2, #0]
	    // Handle the received data
	    memcpy(&masterRxdata, rxbuff, sizeof(MasterDatatypedef));
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <HAL_UARTEx_RxEventCallback+0x8c>)
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_UARTEx_RxEventCallback+0x90>)
 80008c4:	4614      	mov	r4, r2
 80008c6:	461d      	mov	r5, r3
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008d0:	e884 0003 	stmia.w	r4, {r0, r1}

	    assignSlaveData(&slaveTxData, pushButtonstate, pushButtocounter, rcvDatacounter, 92.3, 78.5, 101);
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_UARTEx_RxEventCallback+0x94>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_UARTEx_RxEventCallback+0x98>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_UARTEx_RxEventCallback+0x88>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	ee07 3a10 	vmov	s14, r3
 80008ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80008f2:	2265      	movs	r2, #101	; 0x65
 80008f4:	eddf 1a11 	vldr	s3, [pc, #68]	; 800093c <HAL_UARTEx_RxEventCallback+0x9c>
 80008f8:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8000940 <HAL_UARTEx_RxEventCallback+0xa0>
 80008fc:	eef0 0a47 	vmov.f32	s1, s14
 8000900:	eeb0 0a67 	vmov.f32	s0, s15
 8000904:	480f      	ldr	r0, [pc, #60]	; (8000944 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000906:	f7ff ff89 	bl	800081c <assignSlaveData>

	    sendSlaveData(&huart1,&slaveTxData);
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <HAL_UARTEx_RxEventCallback+0xa4>)
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <HAL_UARTEx_RxEventCallback+0xa8>)
 800090e:	f7ff ffb1 	bl	8000874 <sendSlaveData>

	    // Restart the UART receive interrupt
	    HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxbuff, RX_BUFF_SIZE);
 8000912:	2220      	movs	r2, #32
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <HAL_UARTEx_RxEventCallback+0x90>)
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000918:	f003 ff45 	bl	80047a6 <HAL_UARTEx_ReceiveToIdle_IT>
	}

}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bdb0      	pop	{r4, r5, r7, pc}
 8000924:	40013800 	.word	0x40013800
 8000928:	2000002c 	.word	0x2000002c
 800092c:	20000078 	.word	0x20000078
 8000930:	20000058 	.word	0x20000058
 8000934:	20000030 	.word	0x20000030
 8000938:	20000028 	.word	0x20000028
 800093c:	429d0000 	.word	0x429d0000
 8000940:	42b8999a 	.word	0x42b8999a
 8000944:	20000090 	.word	0x20000090
 8000948:	200000ac 	.word	0x200000ac

0800094c <HAL_UART_TxCpltCallback>:

/**
 * @brief Callback function for UART transmit complete interrupt.
 * @param huart: UART handle
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    // Handle post-transmission actions if necessary
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <MX_USART1_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009aa:	f001 fcff 	bl	80023ac <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f7ff fe5f 	bl	8000676 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009bc:	f003 fe77 	bl	80046ae <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f7ff fe56 	bl	8000676 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009ce:	f003 feac 	bl	800472a <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f7ff fe4d 	bl	8000676 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_USART1_UART_Init+0x90>)
 80009de:	f003 fe2d 	bl	800463c <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f7ff fe45 	bl	8000676 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200000ac 	.word	0x200000ac
 80009f4:	40013800 	.word	0x40013800

080009f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MX_USART2_UART_Init+0x94>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a42:	f001 fcb3 	bl	80023ac <HAL_UART_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f7ff fe13 	bl	8000676 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a54:	f003 fe2b 	bl	80046ae <HAL_UARTEx_SetTxFifoThreshold>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f7ff fe0a 	bl	8000676 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a66:	f003 fe60 	bl	800472a <HAL_UARTEx_SetRxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f7ff fe01 	bl	8000676 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a76:	f003 fde1 	bl	800463c <HAL_UARTEx_DisableFifoMode>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f7ff fdf9 	bl	8000676 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000140 	.word	0x20000140
 8000a8c:	40004400 	.word	0x40004400

08000a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	; 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	2244      	movs	r2, #68	; 0x44
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 ff17 	bl	80048e4 <memset>
  if(uartHandle->Instance==USART1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <HAL_UART_MspInit+0x134>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d140      	bne.n	8000b42 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fa7d 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad8:	f7ff fdcd 	bl	8000676 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae0:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 faba 	bl	80010a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2025      	movs	r0, #37	; 0x25
 8000b36:	f000 f9c0 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3a:	2025      	movs	r0, #37	; 0x25
 8000b3c:	f000 f9d7 	bl	8000eee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b40:	e03b      	b.n	8000bba <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d136      	bne.n	8000bba <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fa37 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000b64:	f7ff fd87 	bl	8000676 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6593      	str	r3, [r2, #88]	; 0x58
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 fa75 	bl	80010a4 <HAL_GPIO_Init>
}
 8000bba:	bf00      	nop
 8000bbc:	3770      	adds	r7, #112	; 0x70
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40013800 	.word	0x40013800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff fdfe 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fe79 	bl	80048f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fcd3 	bl	80005ac <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   r0, =_estack
 8000c08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	200001d8 	.word	0x200001d8

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>

08000c22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f939 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f80e 	bl	8000c54 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff fd6e 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]

}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d022      	beq.n	8000cae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_InitTick+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f944 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10f      	bne.n	8000ca8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d809      	bhi.n	8000ca2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	f04f 30ff 	mov.w	r0, #4294967295
 8000c96:	f000 f910 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_InitTick+0x70>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e007      	b.n	8000cb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e004      	b.n	8000cb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e001      	b.n	8000cb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	200001d4 	.word	0x200001d4
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200001d4 	.word	0x200001d4

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff40 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff33 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa4 	bl	8000e60 <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d005      	beq.n	8000f46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e037      	b.n	8000fb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020e 	bic.w	r2, r2, #14
 8000f54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f003 021f 	and.w	r2, r3, #31
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000faa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d00d      	beq.n	8001008 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e047      	b.n	8001098 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 020e 	bic.w	r2, r2, #14
 8001016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001054:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00c      	beq.n	8001078 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800106c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001076:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
    }
  }
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010b2:	e15a      	b.n	800136a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 814c 	beq.w	8001364 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f003 0201 	and.w	r2, r3, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d123      	bne.n	80011d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	08da      	lsrs	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3208      	adds	r2, #8
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	6939      	ldr	r1, [r7, #16]
 80011d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0203 	and.w	r2, r3, #3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80a6 	beq.w	8001364 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <HAL_GPIO_Init+0x2e4>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121c:	4a5a      	ldr	r2, [pc, #360]	; (8001388 <HAL_GPIO_Init+0x2e4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6613      	str	r3, [r2, #96]	; 0x60
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <HAL_GPIO_Init+0x2e4>)
 8001226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001230:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800125a:	d01f      	beq.n	800129c <HAL_GPIO_Init+0x1f8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d019      	beq.n	8001298 <HAL_GPIO_Init+0x1f4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x2f0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d013      	beq.n	8001294 <HAL_GPIO_Init+0x1f0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x2f4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d00d      	beq.n	8001290 <HAL_GPIO_Init+0x1ec>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x2f8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d007      	beq.n	800128c <HAL_GPIO_Init+0x1e8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d101      	bne.n	8001288 <HAL_GPIO_Init+0x1e4>
 8001284:	2305      	movs	r3, #5
 8001286:	e00a      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001288:	2306      	movs	r3, #6
 800128a:	e008      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 800128c:	2304      	movs	r3, #4
 800128e:	e006      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001290:	2303      	movs	r3, #3
 8001292:	e004      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001294:	2302      	movs	r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <HAL_GPIO_Init+0x1fa>
 800129c:	2300      	movs	r3, #0
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	f002 0203 	and.w	r2, r2, #3
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	4093      	lsls	r3, r2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ae:	4937      	ldr	r1, [pc, #220]	; (800138c <HAL_GPIO_Init+0x2e8>)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e0:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800130a:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f ae9d 	bne.w	80010b4 <HAL_GPIO_Init+0x10>
  }
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000
 8001390:	48000400 	.word	0x48000400
 8001394:	48000800 	.word	0x48000800
 8001398:	48000c00 	.word	0x48000c00
 800139c:	48001000 	.word	0x48001000
 80013a0:	48001400 	.word	0x48001400
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d141      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001422:	d131      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800143c:	4a41      	ldr	r2, [pc, #260]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2232      	movs	r2, #50	; 0x32
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145a:	e002      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146e:	d102      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f2      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001482:	d158      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e057      	b.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001498:	e04d      	b.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a0:	d141      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d131      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014b6:	4a23      	ldr	r2, [pc, #140]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2232      	movs	r2, #50	; 0x32
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e6:	e002      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fa:	d102      	bne.n	8001502 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f2      	bne.n	80014e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150e:	d112      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e011      	b.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001524:	e007      	b.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001534:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40007000 	.word	0x40007000
 8001548:	20000000 	.word	0x20000000
 800154c:	431bde83 	.word	0x431bde83

08001550 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800155a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155e:	6093      	str	r3, [r2, #8]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40007000 	.word	0x40007000

08001570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e2fe      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d075      	beq.n	800167a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4b97      	ldr	r3, [pc, #604]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001598:	4b94      	ldr	r3, [pc, #592]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_OscConfig+0x3e>
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d002      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05b      	beq.n	8001678 <HAL_RCC_OscConfig+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d157      	bne.n	8001678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2d9      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x74>
 80015d6:	4b85      	ldr	r3, [pc, #532]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a84      	ldr	r2, [pc, #528]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b7f      	ldr	r3, [pc, #508]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7e      	ldr	r2, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b7c      	ldr	r3, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7b      	ldr	r2, [pc, #492]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 8001608:	4b78      	ldr	r3, [pc, #480]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a77      	ldr	r2, [pc, #476]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b75      	ldr	r3, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a74      	ldr	r2, [pc, #464]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb60 	bl	8000cec <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fb5c 	bl	8000cec <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e29e      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001642:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xc0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb4c 	bl	8000cec <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fb48 	bl	8000cec <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e28a      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166a:	4b60      	ldr	r3, [pc, #384]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0xe8>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d075      	beq.n	8001772 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_OscConfig+0x136>
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_OscConfig+0x13c>
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d11f      	bne.n	80016ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x154>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e25d      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	4946      	ldr	r1, [pc, #280]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016d8:	4b45      	ldr	r3, [pc, #276]	; (80017f0 <HAL_RCC_OscConfig+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fab9 	bl	8000c54 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d043      	beq.n	8001770 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e249      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d023      	beq.n	800173c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a3c      	ldr	r2, [pc, #240]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff faf4 	bl	8000cec <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff faf0 	bl	8000cec <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e232      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	061b      	lsls	r3, r3, #24
 8001734:	492d      	ldr	r1, [pc, #180]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
 800173a:	e01a      	b.n	8001772 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fad0 	bl	8000cec <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff facc 	bl	8000cec <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e20e      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1e0>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d041      	beq.n	8001802 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff faa9 	bl	8000cec <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff faa5 	bl	8000cec <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1e7      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0ef      	beq.n	800179e <HAL_RCC_OscConfig+0x22e>
 80017be:	e020      	b.n	8001802 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x27c>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa8c 	bl	8000cec <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d6:	e00d      	b.n	80017f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fa88 	bl	8000cec <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d906      	bls.n	80017f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1ca      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	4b8c      	ldr	r3, [pc, #560]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ea      	bne.n	80017d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80a6 	beq.w	800195c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_OscConfig+0x2b4>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x2b6>
 8001824:	2300      	movs	r3, #0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00d      	beq.n	8001846 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	4a7e      	ldr	r2, [pc, #504]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
 8001836:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <HAL_RCC_OscConfig+0x4bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x4bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a75      	ldr	r2, [pc, #468]	; (8001a2c <HAL_RCC_OscConfig+0x4bc>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fa45 	bl	8000cec <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fa41 	bl	8000cec <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e183      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001878:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <HAL_RCC_OscConfig+0x4bc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_RCC_OscConfig+0x32e>
 800188c:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	4a65      	ldr	r2, [pc, #404]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189c:	e024      	b.n	80018e8 <HAL_RCC_OscConfig+0x378>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d110      	bne.n	80018c8 <HAL_RCC_OscConfig+0x358>
 80018a6:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ac:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018bc:	4a5a      	ldr	r2, [pc, #360]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c6:	e00f      	b.n	80018e8 <HAL_RCC_OscConfig+0x378>
 80018c8:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	4a56      	ldr	r2, [pc, #344]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d016      	beq.n	800191e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff f9fc 	bl	8000cec <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff f9f8 	bl	8000cec <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e138      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190e:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ed      	beq.n	80018f8 <HAL_RCC_OscConfig+0x388>
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191e:	f7ff f9e5 	bl	8000cec <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff f9e1 	bl	8000cec <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e121      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ed      	bne.n	8001926 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800194a:	7ffb      	ldrb	r3, [r7, #31]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	4a34      	ldr	r2, [pc, #208]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01c      	beq.n	80019aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001976:	4a2c      	ldr	r2, [pc, #176]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff f9b4 	bl	8000cec <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001988:	f7ff f9b0 	bl	8000cec <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0f2      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 800199c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ef      	beq.n	8001988 <HAL_RCC_OscConfig+0x418>
 80019a8:	e01b      	b.n	80019e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80019ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff f997 	bl	8000cec <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c2:	f7ff f993 	bl	8000cec <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0d5      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ef      	bne.n	80019c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80c9 	beq.w	8001b7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	f000 8083 	beq.w	8001b00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d15e      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f96d 	bl	8000cec <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	e00c      	b.n	8001a30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff f969 	bl	8000cec <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d905      	bls.n	8001a30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0ab      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ec      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_RCC_OscConfig+0x61c>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6a11      	ldr	r1, [r2, #32]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	4311      	orrs	r1, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a56:	0212      	lsls	r2, r2, #8
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a5e:	0852      	lsrs	r2, r2, #1
 8001a60:	3a01      	subs	r2, #1
 8001a62:	0552      	lsls	r2, r2, #21
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a6a:	0852      	lsrs	r2, r2, #1
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	0652      	lsls	r2, r2, #25
 8001a70:	4311      	orrs	r1, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a76:	06d2      	lsls	r2, r2, #27
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	4943      	ldr	r1, [pc, #268]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f928 	bl	8000cec <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f924 	bl	8000cec <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e066      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x530>
 8001abe:	e05e      	b.n	8001b7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a30      	ldr	r2, [pc, #192]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f90e 	bl	8000cec <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f90a 	bl	8000cec <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e04c      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	4924      	ldr	r1, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_OscConfig+0x620>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
 8001afe:	e03e      	b.n	8001b7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e039      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d12c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d123      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11b      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d113      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	3b01      	subs	r3, #1
 8001b74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	019f800c 	.word	0x019f800c
 8001b90:	feeefffc 	.word	0xfeeefffc

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e11e      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d910      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b8e      	ldr	r3, [pc, #568]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 020f 	bic.w	r2, r3, #15
 8001bc2:	498c      	ldr	r1, [pc, #560]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b8a      	ldr	r3, [pc, #552]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e106      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d073      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d129      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0f4      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c00:	f000 f99e 	bl	8001f40 <RCC_GetSysClockFreqFromPLLSource>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4a7c      	ldr	r2, [pc, #496]	; (8001dfc <HAL_RCC_ClockConfig+0x268>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d93f      	bls.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d033      	beq.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12f      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c36:	4a70      	ldr	r2, [pc, #448]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e024      	b.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0c6      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0be      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c6c:	f000 f8ce 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4a61      	ldr	r2, [pc, #388]	; (8001dfc <HAL_RCC_ClockConfig+0x268>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d909      	bls.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4957      	ldr	r1, [pc, #348]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f824 	bl	8000cec <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff f820 	bl	8000cec <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e095      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d08:	4a3b      	ldr	r2, [pc, #236]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4936      	ldr	r1, [pc, #216]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b80      	cmp	r3, #128	; 0x80
 8001d28:	d105      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d21d      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 020f 	bic.w	r2, r3, #15
 8001d4c:	4929      	ldr	r1, [pc, #164]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d54:	f7fe ffca 	bl	8000cec <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe ffc6 	bl	8000cec <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e03b      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1ed      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4917      	ldr	r1, [pc, #92]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490f      	ldr	r1, [pc, #60]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dbe:	f000 f825 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	490c      	ldr	r1, [pc, #48]	; (8001e00 <HAL_RCC_ClockConfig+0x26c>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x270>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x274>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff36 	bl	8000c54 <HAL_InitTick>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	04c4b400 	.word	0x04c4b400
 8001e00:	08004970 	.word	0x08004970
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e047      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d102      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e03e      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d136      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3301      	adds	r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6a:	68d2      	ldr	r2, [r2, #12]
 8001e6c:	0a12      	lsrs	r2, r2, #8
 8001e6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e00c      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e7a:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e84:	68d2      	ldr	r2, [r2, #12]
 8001e86:	0a12      	lsrs	r2, r2, #8
 8001e88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
      break;
 8001e92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0e5b      	lsrs	r3, r3, #25
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e001      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eb4:	693b      	ldr	r3, [r7, #16]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	007a1200 	.word	0x007a1200

08001ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4904      	ldr	r1, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08004980 	.word	0x08004980

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f18:	f7ff ffda 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08004980 	.word	0x08004980

08001f40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d10c      	bne.n	8001f7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f64:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6e:	68d2      	ldr	r2, [r2, #12]
 8001f70:	0a12      	lsrs	r2, r2, #8
 8001f72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
    break;
 8001f7c:	e00c      	b.n	8001f98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	0a12      	lsrs	r2, r2, #8
 8001f8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    break;
 8001f96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0e5b      	lsrs	r3, r3, #25
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	007a1200 	.word	0x007a1200
 8001fc8:	00f42400 	.word	0x00f42400

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8098 	beq.w	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b40      	ldr	r3, [pc, #256]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a3f      	ldr	r2, [pc, #252]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a39      	ldr	r2, [pc, #228]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002022:	f7fe fe63 	bl	8000cec <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002028:	e009      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7fe fe5f 	bl	8000cec <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d902      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	74fb      	strb	r3, [r7, #19]
        break;
 800203c:	e005      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ef      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d159      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01e      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	d019      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002076:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe fe1f 	bl	8000cec <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b0:	e00b      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fe1b 	bl	8000cec <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d902      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	74fb      	strb	r3, [r7, #19]
            break;
 80020c8:	e006      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ec      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020f4:	e008      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	74bb      	strb	r3, [r7, #18]
 80020fa:	e005      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4ba6      	ldr	r3, [pc, #664]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4aa5      	ldr	r2, [pc, #660]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002126:	4ba0      	ldr	r3, [pc, #640]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	499c      	ldr	r1, [pc, #624]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002148:	4b97      	ldr	r3, [pc, #604]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f023 020c 	bic.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4994      	ldr	r1, [pc, #592]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800216a:	4b8f      	ldr	r3, [pc, #572]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	498b      	ldr	r1, [pc, #556]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800218c:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	4983      	ldr	r1, [pc, #524]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ae:	4b7e      	ldr	r3, [pc, #504]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	497a      	ldr	r1, [pc, #488]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	4972      	ldr	r1, [pc, #456]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f2:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4969      	ldr	r1, [pc, #420]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002214:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4961      	ldr	r1, [pc, #388]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	4958      	ldr	r1, [pc, #352]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	4950      	ldr	r1, [pc, #320]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002276:	d105      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002282:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002290:	4b45      	ldr	r3, [pc, #276]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	4942      	ldr	r1, [pc, #264]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ae:	d105      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a3c      	ldr	r2, [pc, #240]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022c8:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e6:	d105      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d015      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	4926      	ldr	r1, [pc, #152]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800231e:	d105      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4918      	ldr	r1, [pc, #96]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002356:	d105      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002362:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d015      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800239c:	7cbb      	ldrb	r3, [r7, #18]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e042      	b.n	8002444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d106      	bne.n	80023d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe fb5d 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2224      	movs	r2, #36	; 0x24
 80023da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fec0 	bl	800317c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fbf1 	bl	8002be4 <UART_SetConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e01b      	b.n	8002444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800241a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 ff3f 	bl	80032c0 <UART_CheckIdleState>
 8002442:	4603      	mov	r3, r0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800244c:	b480      	push	{r7}
 800244e:	b091      	sub	sp, #68	; 0x44
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	2b20      	cmp	r3, #32
 8002462:	d178      	bne.n	8002556 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_UART_Transmit_IT+0x24>
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e071      	b.n	8002558 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	88fa      	ldrh	r2, [r7, #6]
 800247e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2221      	movs	r2, #33	; 0x21
 800249c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a8:	d12a      	bne.n	8002500 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	d107      	bne.n	80024c4 <HAL_UART_Transmit_IT+0x78>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a29      	ldr	r2, [pc, #164]	; (8002564 <HAL_UART_Transmit_IT+0x118>)
 80024c0:	679a      	str	r2, [r3, #120]	; 0x78
 80024c2:	e002      	b.n	80024ca <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a28      	ldr	r2, [pc, #160]	; (8002568 <HAL_UART_Transmit_IT+0x11c>)
 80024c8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3308      	adds	r3, #8
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	e853 3f00 	ldrex	r3, [r3]
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3308      	adds	r3, #8
 80024e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ea:	637a      	str	r2, [r7, #52]	; 0x34
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e5      	bne.n	80024ca <HAL_UART_Transmit_IT+0x7e>
 80024fe:	e028      	b.n	8002552 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002508:	d107      	bne.n	800251a <HAL_UART_Transmit_IT+0xce>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_UART_Transmit_IT+0x120>)
 8002516:	679a      	str	r2, [r3, #120]	; 0x78
 8002518:	e002      	b.n	8002520 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <HAL_UART_Transmit_IT+0x124>)
 800251e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	613b      	str	r3, [r7, #16]
   return(result);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	69f9      	ldr	r1, [r7, #28]
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	61bb      	str	r3, [r7, #24]
   return(result);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e6      	bne.n	8002520 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3744      	adds	r7, #68	; 0x44
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	08003a87 	.word	0x08003a87
 8002568:	080039a7 	.word	0x080039a7
 800256c:	080038e5 	.word	0x080038e5
 8002570:	0800382d 	.word	0x0800382d

08002574 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0ba      	sub	sp, #232	; 0xe8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800259a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800259e:	f640 030f 	movw	r3, #2063	; 0x80f
 80025a2:	4013      	ands	r3, r2
 80025a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80025a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11b      	bne.n	80025e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 82e3 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
      }
      return;
 80025e6:	e2dd      	b.n	8002ba4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80025e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8123 	beq.w	8002838 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80025f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80025f6:	4b8d      	ldr	r3, [pc, #564]	; (800282c <HAL_UART_IRQHandler+0x2b8>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80025fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002602:	4b8b      	ldr	r3, [pc, #556]	; (8002830 <HAL_UART_IRQHandler+0x2bc>)
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8116 	beq.w	8002838 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800260c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d011      	beq.n	800263c <HAL_UART_IRQHandler+0xc8>
 8002618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2201      	movs	r2, #1
 800262a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800263c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d011      	beq.n	800266c <HAL_UART_IRQHandler+0xf8>
 8002648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2202      	movs	r2, #2
 800265a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800266c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d011      	beq.n	800269c <HAL_UART_IRQHandler+0x128>
 8002678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2204      	movs	r2, #4
 800268a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800269c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d017      	beq.n	80026d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80026b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80026b8:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_UART_IRQHandler+0x2b8>)
 80026ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2208      	movs	r2, #8
 80026c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f043 0208 	orr.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <HAL_UART_IRQHandler+0x196>
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8249 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d013      	beq.n	800274a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800272e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d005      	beq.n	800276e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002766:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800276a:	2b00      	cmp	r3, #0
 800276c:	d054      	beq.n	8002818 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 ffe0 	bl	8003734 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d146      	bne.n	8002810 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3308      	adds	r3, #8
 8002788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800279c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3308      	adds	r3, #8
 80027aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1d9      	bne.n	8002782 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <HAL_UART_IRQHandler+0x2c0>)
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fbf3 	bl	8000fd4 <HAL_DMA_Abort_IT>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002802:	4610      	mov	r0, r2
 8002804:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002806:	e00f      	b.n	8002828 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9e1 	bl	8002bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280e:	e00b      	b.n	8002828 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f9dd 	bl	8002bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002816:	e007      	b.n	8002828 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9d9 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002826:	e1bf      	b.n	8002ba8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	bf00      	nop
    return;
 800282a:	e1bd      	b.n	8002ba8 <HAL_UART_IRQHandler+0x634>
 800282c:	10000001 	.word	0x10000001
 8002830:	04000120 	.word	0x04000120
 8002834:	08003801 	.word	0x08003801

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 8153 	bne.w	8002ae8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 814c 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8145 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2210      	movs	r2, #16
 8002864:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	f040 80bb 	bne.w	80029ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 818f 	beq.w	8002bac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002894:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002898:	429a      	cmp	r2, r3
 800289a:	f080 8187 	bcs.w	8002bac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8087 	bne.w	80029ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1da      	bne.n	80028bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3308      	adds	r3, #8
 800290c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3308      	adds	r3, #8
 8002926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800292a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800292e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800293c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e1      	bne.n	8002906 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3308      	adds	r3, #8
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3308      	adds	r3, #8
 8002962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800296c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e3      	bne.n	8002942 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002998:	f023 0310 	bic.w	r3, r3, #16
 800299c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e4      	bne.n	8002988 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe faac 	bl	8000f22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7fd ff5b 	bl	80008a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029ea:	e0df      	b.n	8002bac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80d1 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80cc 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e4      	bne.n	8002a18 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3308      	adds	r3, #8
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3308      	adds	r3, #8
 8002a72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a76:	633a      	str	r2, [r7, #48]	; 0x30
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e1      	bne.n	8002a4e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0310 	bic.w	r3, r3, #16
 8002ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	69b9      	ldr	r1, [r7, #24]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e4      	bne.n	8002a9e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fd fedd 	bl	80008a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae6:	e063      	b.n	8002bb0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00e      	beq.n	8002b12 <HAL_UART_IRQHandler+0x59e>
 8002af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f001 fd78 	bl	8004600 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b10:	e051      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d014      	beq.n	8002b48 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03a      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
    }
    return;
 8002b46:	e035      	b.n	8002bb4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_UART_IRQHandler+0x5f4>
 8002b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f001 f805 	bl	8003b70 <UART_EndTransmit_IT>
    return;
 8002b66:	e026      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_UART_IRQHandler+0x614>
 8002b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f001 fd51 	bl	8004628 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b86:	e016      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x642>
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	da0c      	bge.n	8002bb6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f001 fd39 	bl	8004614 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ba2:	e008      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
      return;
 8002ba4:	bf00      	nop
 8002ba6:	e006      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
    return;
 8002ba8:	bf00      	nop
 8002baa:	e004      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
      return;
 8002bac:	bf00      	nop
 8002bae:	e002      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
      return;
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_UART_IRQHandler+0x642>
    return;
 8002bb4:	bf00      	nop
  }
}
 8002bb6:	37e8      	adds	r7, #232	; 0xe8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be8:	b08c      	sub	sp, #48	; 0x30
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4bab      	ldr	r3, [pc, #684]	; (8002ec0 <UART_SetConfig+0x2dc>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4aa0      	ldr	r2, [pc, #640]	; (8002ec4 <UART_SetConfig+0x2e0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002c5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f023 010f 	bic.w	r1, r3, #15
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a91      	ldr	r2, [pc, #580]	; (8002ec8 <UART_SetConfig+0x2e4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d125      	bne.n	8002cd4 <UART_SetConfig+0xf0>
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <UART_SetConfig+0x2e8>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d81a      	bhi.n	8002ccc <UART_SetConfig+0xe8>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <UART_SetConfig+0xb8>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cbd 	.word	0x08002cbd
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc5 	.word	0x08002cc5
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb2:	e0d6      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cba:	e0d2      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cc2:	e0ce      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cca:	e0ca      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cd2:	e0c6      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a7d      	ldr	r2, [pc, #500]	; (8002ed0 <UART_SetConfig+0x2ec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d138      	bne.n	8002d50 <UART_SetConfig+0x16c>
 8002cde:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <UART_SetConfig+0x2e8>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d82d      	bhi.n	8002d48 <UART_SetConfig+0x164>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0x110>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d49 	.word	0x08002d49
 8002d00:	08002d49 	.word	0x08002d49
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002d49 	.word	0x08002d49
 8002d0c:	08002d49 	.word	0x08002d49
 8002d10:	08002d49 	.word	0x08002d49
 8002d14:	08002d31 	.word	0x08002d31
 8002d18:	08002d49 	.word	0x08002d49
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	08002d41 	.word	0x08002d41
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d2e:	e098      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d30:	2302      	movs	r3, #2
 8002d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d36:	e094      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d3e:	e090      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d40:	2308      	movs	r3, #8
 8002d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d46:	e08c      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d4e:	e088      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5f      	ldr	r2, [pc, #380]	; (8002ed4 <UART_SetConfig+0x2f0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d125      	bne.n	8002da6 <UART_SetConfig+0x1c2>
 8002d5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <UART_SetConfig+0x2e8>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d64:	2b30      	cmp	r3, #48	; 0x30
 8002d66:	d016      	beq.n	8002d96 <UART_SetConfig+0x1b2>
 8002d68:	2b30      	cmp	r3, #48	; 0x30
 8002d6a:	d818      	bhi.n	8002d9e <UART_SetConfig+0x1ba>
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d00a      	beq.n	8002d86 <UART_SetConfig+0x1a2>
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d814      	bhi.n	8002d9e <UART_SetConfig+0x1ba>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <UART_SetConfig+0x19a>
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d008      	beq.n	8002d8e <UART_SetConfig+0x1aa>
 8002d7c:	e00f      	b.n	8002d9e <UART_SetConfig+0x1ba>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d84:	e06d      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d8c:	e069      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d94:	e065      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d96:	2308      	movs	r3, #8
 8002d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d9c:	e061      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002d9e:	2310      	movs	r3, #16
 8002da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da4:	e05d      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <UART_SetConfig+0x2f4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d125      	bne.n	8002dfc <UART_SetConfig+0x218>
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <UART_SetConfig+0x2e8>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dba:	2bc0      	cmp	r3, #192	; 0xc0
 8002dbc:	d016      	beq.n	8002dec <UART_SetConfig+0x208>
 8002dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc0:	d818      	bhi.n	8002df4 <UART_SetConfig+0x210>
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	d00a      	beq.n	8002ddc <UART_SetConfig+0x1f8>
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d814      	bhi.n	8002df4 <UART_SetConfig+0x210>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <UART_SetConfig+0x1f0>
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d008      	beq.n	8002de4 <UART_SetConfig+0x200>
 8002dd2:	e00f      	b.n	8002df4 <UART_SetConfig+0x210>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dda:	e042      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de2:	e03e      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002de4:	2304      	movs	r3, #4
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dea:	e03a      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002dec:	2308      	movs	r3, #8
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df2:	e036      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002df4:	2310      	movs	r3, #16
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dfa:	e032      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <UART_SetConfig+0x2e0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12a      	bne.n	8002e5c <UART_SetConfig+0x278>
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <UART_SetConfig+0x2e8>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e14:	d01a      	beq.n	8002e4c <UART_SetConfig+0x268>
 8002e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e1a:	d81b      	bhi.n	8002e54 <UART_SetConfig+0x270>
 8002e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e20:	d00c      	beq.n	8002e3c <UART_SetConfig+0x258>
 8002e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e26:	d815      	bhi.n	8002e54 <UART_SetConfig+0x270>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <UART_SetConfig+0x250>
 8002e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e30:	d008      	beq.n	8002e44 <UART_SetConfig+0x260>
 8002e32:	e00f      	b.n	8002e54 <UART_SetConfig+0x270>
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e3a:	e012      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e42:	e00e      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002e44:	2304      	movs	r3, #4
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e4a:	e00a      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e52:	e006      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002e54:	2310      	movs	r3, #16
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e5a:	e002      	b.n	8002e62 <UART_SetConfig+0x27e>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <UART_SetConfig+0x2e0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f040 80a8 	bne.w	8002fbe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d834      	bhi.n	8002ee0 <UART_SetConfig+0x2fc>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0x298>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ee1 	.word	0x08002ee1
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ee1 	.word	0x08002ee1
 8002e8c:	08002eaf 	.word	0x08002eaf
 8002e90:	08002ee1 	.word	0x08002ee1
 8002e94:	08002ee1 	.word	0x08002ee1
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002eb7 	.word	0x08002eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff f822 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ea6:	e021      	b.n	8002eec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <UART_SetConfig+0x2f8>)
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002eac:	e01e      	b.n	8002eec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eae:	f7fe ffad 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8002eb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eb4:	e01a      	b.n	8002eec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ebc:	e016      	b.n	8002eec <UART_SetConfig+0x308>
 8002ebe:	bf00      	nop
 8002ec0:	cfff69f3 	.word	0xcfff69f3
 8002ec4:	40008000 	.word	0x40008000
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40004400 	.word	0x40004400
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40004c00 	.word	0x40004c00
 8002edc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002eea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 812a 	beq.w	8003148 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	4a9e      	ldr	r2, [pc, #632]	; (8003174 <UART_SetConfig+0x590>)
 8002efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d305      	bcc.n	8002f24 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d903      	bls.n	8002f2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f2a:	e10d      	b.n	8003148 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	60fa      	str	r2, [r7, #12]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	4a8e      	ldr	r2, [pc, #568]	; (8003174 <UART_SetConfig+0x590>)
 8002f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2200      	movs	r2, #0
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f4e:	f7fd f963 	bl	8000218 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	020b      	lsls	r3, r1, #8
 8002f64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f68:	0202      	lsls	r2, r0, #8
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	6849      	ldr	r1, [r1, #4]
 8002f6e:	0849      	lsrs	r1, r1, #1
 8002f70:	2000      	movs	r0, #0
 8002f72:	460c      	mov	r4, r1
 8002f74:	4605      	mov	r5, r0
 8002f76:	eb12 0804 	adds.w	r8, r2, r4
 8002f7a:	eb43 0905 	adc.w	r9, r3, r5
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	469a      	mov	sl, r3
 8002f86:	4693      	mov	fp, r2
 8002f88:	4652      	mov	r2, sl
 8002f8a:	465b      	mov	r3, fp
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	4649      	mov	r1, r9
 8002f90:	f7fd f942 	bl	8000218 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa2:	d308      	bcc.n	8002fb6 <UART_SetConfig+0x3d2>
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002faa:	d204      	bcs.n	8002fb6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e0c8      	b.n	8003148 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002fbc:	e0c4      	b.n	8003148 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc6:	d167      	bne.n	8003098 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d828      	bhi.n	8003022 <UART_SetConfig+0x43e>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <UART_SetConfig+0x3f4>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08003005 	.word	0x08003005
 8002fe0:	0800300d 	.word	0x0800300d
 8002fe4:	08003023 	.word	0x08003023
 8002fe8:	08003013 	.word	0x08003013
 8002fec:	08003023 	.word	0x08003023
 8002ff0:	08003023 	.word	0x08003023
 8002ff4:	08003023 	.word	0x08003023
 8002ff8:	0800301b 	.word	0x0800301b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f7fe ff74 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8003000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003002:	e014      	b.n	800302e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7fe ff86 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8003008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800300a:	e010      	b.n	800302e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800300c:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <UART_SetConfig+0x594>)
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003012:	f7fe fefb 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003018:	e009      	b.n	800302e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003020:	e005      	b.n	800302e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800302c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8089 	beq.w	8003148 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	4a4e      	ldr	r2, [pc, #312]	; (8003174 <UART_SetConfig+0x590>)
 800303c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003040:	461a      	mov	r2, r3
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	fbb3 f3f2 	udiv	r3, r3, r2
 8003048:	005a      	lsls	r2, r3, #1
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	441a      	add	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	d916      	bls.n	8003090 <UART_SetConfig+0x4ac>
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003068:	d212      	bcs.n	8003090 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f023 030f 	bic.w	r3, r3, #15
 8003072:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	b29a      	uxth	r2, r3
 8003080:	8bfb      	ldrh	r3, [r7, #30]
 8003082:	4313      	orrs	r3, r2
 8003084:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	8bfa      	ldrh	r2, [r7, #30]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e05b      	b.n	8003148 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003096:	e057      	b.n	8003148 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800309c:	2b08      	cmp	r3, #8
 800309e:	d828      	bhi.n	80030f2 <UART_SetConfig+0x50e>
 80030a0:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <UART_SetConfig+0x4c4>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030dd 	.word	0x080030dd
 80030b4:	080030f3 	.word	0x080030f3
 80030b8:	080030e3 	.word	0x080030e3
 80030bc:	080030f3 	.word	0x080030f3
 80030c0:	080030f3 	.word	0x080030f3
 80030c4:	080030f3 	.word	0x080030f3
 80030c8:	080030eb 	.word	0x080030eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030cc:	f7fe ff0c 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030d2:	e014      	b.n	80030fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7fe ff1e 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 80030d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030da:	e010      	b.n	80030fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <UART_SetConfig+0x594>)
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030e0:	e00d      	b.n	80030fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e2:	f7fe fe93 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030e8:	e009      	b.n	80030fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030f0:	e005      	b.n	80030fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80030fc:	bf00      	nop
    }

    if (pclk != 0U)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d021      	beq.n	8003148 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <UART_SetConfig+0x590>)
 800310a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310e:	461a      	mov	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	fbb3 f2f2 	udiv	r2, r3, r2
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	441a      	add	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d909      	bls.n	8003142 <UART_SetConfig+0x55e>
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d205      	bcs.n	8003142 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	b29a      	uxth	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	e002      	b.n	8003148 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2201      	movs	r2, #1
 800314c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2201      	movs	r2, #1
 8003154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2200      	movs	r2, #0
 8003162:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003164:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003168:	4618      	mov	r0, r3
 800316a:	3730      	adds	r7, #48	; 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	08004988 	.word	0x08004988
 8003178:	00f42400 	.word	0x00f42400

0800317c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01a      	beq.n	8003292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d10a      	bne.n	8003292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b098      	sub	sp, #96	; 0x60
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032d0:	f7fd fd0c 	bl	8000cec <HAL_GetTick>
 80032d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d12f      	bne.n	8003344 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f88e 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d022      	beq.n	8003344 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003312:	653b      	str	r3, [r7, #80]	; 0x50
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
 800331e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e6      	bne.n	80032fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e063      	b.n	800340c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d149      	bne.n	80033e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003352:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335a:	2200      	movs	r2, #0
 800335c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f857 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03c      	beq.n	80033e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	623b      	str	r3, [r7, #32]
   return(result);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
 800338c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e6      	bne.n	800336c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3308      	adds	r3, #8
 80033bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033be:	61fa      	str	r2, [r7, #28]
 80033c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	617b      	str	r3, [r7, #20]
   return(result);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e5      	bne.n	800339e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e012      	b.n	800340c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3758      	adds	r7, #88	; 0x58
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003424:	e04f      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d04b      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7fd fc5d 	bl	8000cec <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <UART_WaitOnFlagUntilTimeout+0x30>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e04e      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d037      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d034      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d031      	beq.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b08      	cmp	r3, #8
 800346e:	d110      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2208      	movs	r2, #8
 8003476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f95b 	bl	8003734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2208      	movs	r2, #8
 8003482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e029      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a0:	d111      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f941 	bl	8003734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e00f      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d0a0      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b0a3      	sub	sp, #140	; 0x8c
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	d10e      	bne.n	8003542 <UART_Start_Receive_IT+0x52>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <UART_Start_Receive_IT+0x48>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003532:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003536:	e02d      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003540:	e028      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <UART_Start_Receive_IT+0x76>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <UART_Start_Receive_IT+0x6c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800355a:	e01b      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	227f      	movs	r2, #127	; 0x7f
 8003560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003564:	e016      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800356e:	d10d      	bne.n	800358c <UART_Start_Receive_IT+0x9c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <UART_Start_Receive_IT+0x92>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	227f      	movs	r2, #127	; 0x7f
 800357c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003580:	e008      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	223f      	movs	r2, #63	; 0x3f
 8003586:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800358a:	e003      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2222      	movs	r2, #34	; 0x22
 80035a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80035b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80035c8:	673a      	str	r2, [r7, #112]	; 0x70
 80035ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80035ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80035d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e3      	bne.n	80035a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e4:	d14f      	bne.n	8003686 <UART_Start_Receive_IT+0x196>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d349      	bcc.n	8003686 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d107      	bne.n	800360c <UART_Start_Receive_IT+0x11c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a47      	ldr	r2, [pc, #284]	; (8003724 <UART_Start_Receive_IT+0x234>)
 8003608:	675a      	str	r2, [r3, #116]	; 0x74
 800360a:	e002      	b.n	8003612 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a46      	ldr	r2, [pc, #280]	; (8003728 <UART_Start_Receive_IT+0x238>)
 8003610:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01a      	beq.n	8003650 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800363c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800363e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003642:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e4      	bne.n	800361a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003670:	64ba      	str	r2, [r7, #72]	; 0x48
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_Start_Receive_IT+0x160>
 8003684:	e046      	b.n	8003714 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368e:	d107      	bne.n	80036a0 <UART_Start_Receive_IT+0x1b0>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a24      	ldr	r2, [pc, #144]	; (800372c <UART_Start_Receive_IT+0x23c>)
 800369c:	675a      	str	r2, [r3, #116]	; 0x74
 800369e:	e002      	b.n	80036a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a23      	ldr	r2, [pc, #140]	; (8003730 <UART_Start_Receive_IT+0x240>)
 80036a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d019      	beq.n	80036e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80036c2:	677b      	str	r3, [r7, #116]	; 0x74
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
 80036ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e6      	bne.n	80036ae <UART_Start_Receive_IT+0x1be>
 80036e0:	e018      	b.n	8003714 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	613b      	str	r3, [r7, #16]
   return(result);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f043 0320 	orr.w	r3, r3, #32
 80036f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	61bb      	str	r3, [r7, #24]
   return(result);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e6      	bne.n	80036e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	378c      	adds	r7, #140	; 0x8c
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	08004299 	.word	0x08004299
 8003728:	08003f39 	.word	0x08003f39
 800372c:	08003d81 	.word	0x08003d81
 8003730:	08003bc9 	.word	0x08003bc9

08003734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b095      	sub	sp, #84	; 0x54
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	643b      	str	r3, [r7, #64]	; 0x40
 800375c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e6      	bne.n	800373c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	61fb      	str	r3, [r7, #28]
   return(result);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e3      	bne.n	800376e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d118      	bne.n	80037e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80037f4:	bf00      	nop
 80037f6:	3754      	adds	r7, #84	; 0x54
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff f9d6 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b08f      	sub	sp, #60	; 0x3c
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	2b21      	cmp	r3, #33	; 0x21
 800383c:	d14c      	bne.n	80038d8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d132      	bne.n	80038b0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	61fb      	str	r3, [r7, #28]
   return(result);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e6      	bne.n	800384a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	60bb      	str	r3, [r7, #8]
   return(result);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6979      	ldr	r1, [r7, #20]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	613b      	str	r3, [r7, #16]
   return(result);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038ae:	e013      	b.n	80038d8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80038d8:	bf00      	nop
 80038da:	373c      	adds	r7, #60	; 0x3c
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b091      	sub	sp, #68	; 0x44
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	2b21      	cmp	r3, #33	; 0x21
 80038f4:	d151      	bne.n	800399a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d132      	bne.n	8003968 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	623b      	str	r3, [r7, #32]
   return(result);
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 8003922:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	60fb      	str	r3, [r7, #12]
   return(result);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	69b9      	ldr	r1, [r7, #24]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	617b      	str	r3, [r7, #20]
   return(result);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e6      	bne.n	8003934 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003966:	e018      	b.n	800399a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800399a:	bf00      	nop
 800399c:	3744      	adds	r7, #68	; 0x44
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b091      	sub	sp, #68	; 0x44
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	2b21      	cmp	r3, #33	; 0x21
 80039b6:	d160      	bne.n	8003a7a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80039be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80039c0:	e057      	b.n	8003a72 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d133      	bne.n	8003a36 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	623b      	str	r3, [r7, #32]
   return(result);
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ee:	633a      	str	r2, [r7, #48]	; 0x30
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e6      	bne.n	8003a02 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003a34:	e021      	b.n	8003a7a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003a72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1a4      	bne.n	80039c2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003a78:	e7ff      	b.n	8003a7a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003a7a:	bf00      	nop
 8003a7c:	3744      	adds	r7, #68	; 0x44
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b091      	sub	sp, #68	; 0x44
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	2b21      	cmp	r3, #33	; 0x21
 8003a96:	d165      	bne.n	8003b64 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003a9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003aa0:	e05c      	b.n	8003b5c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d133      	bne.n	8003b16 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e5      	bne.n	8003aae <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003b14:	e026      	b.n	8003b64 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d018      	beq.n	8003b56 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003b5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d19f      	bne.n	8003aa2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003b62:	e7ff      	b.n	8003b64 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003b64:	bf00      	nop
 8003b66:	3744      	adds	r7, #68	; 0x44
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e6      	bne.n	8003b78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fc fec7 	bl	800094c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbe:	bf00      	nop
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b09c      	sub	sp, #112	; 0x70
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003bd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	2b22      	cmp	r3, #34	; 0x22
 8003be2:	f040 80be 	bne.w	8003d62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003bf4:	b2d9      	uxtb	r1, r3
 8003bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	400a      	ands	r2, r1
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 80a1 	bne.w	8003d72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3308      	adds	r3, #8
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	667b      	str	r3, [r7, #100]	; 0x64
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c82:	647a      	str	r2, [r7, #68]	; 0x44
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <UART_RxISR_8BIT+0x1b4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01f      	beq.n	8003cf4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e6      	bne.n	8003cc2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d12e      	bne.n	8003d5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0310 	bic.w	r3, r3, #16
 8003d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e6      	bne.n	8003d02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d103      	bne.n	8003d4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc fda4 	bl	80008a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d58:	e00b      	b.n	8003d72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fe ff2e 	bl	8002bbc <HAL_UART_RxCpltCallback>
}
 8003d60:	e007      	b.n	8003d72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	619a      	str	r2, [r3, #24]
}
 8003d72:	bf00      	nop
 8003d74:	3770      	adds	r7, #112	; 0x70
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40008000 	.word	0x40008000

08003d80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b09c      	sub	sp, #112	; 0x70
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d8e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d98:	2b22      	cmp	r3, #34	; 0x22
 8003d9a:	f040 80be 	bne.w	8003f1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003dae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003db2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003db6:	4013      	ands	r3, r2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	1c9a      	adds	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80a1 	bne.w	8003f2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
 8003e08:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e6      	bne.n	8003de8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	663b      	str	r3, [r7, #96]	; 0x60
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e3a:	643a      	str	r2, [r7, #64]	; 0x40
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e5      	bne.n	8003e1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a33      	ldr	r2, [pc, #204]	; (8003f34 <UART_RxISR_16BIT+0x1b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01f      	beq.n	8003eac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d12e      	bne.n	8003f12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0310 	bic.w	r3, r3, #16
 8003ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d103      	bne.n	8003f02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc fcc8 	bl	80008a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f10:	e00b      	b.n	8003f2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe fe52 	bl	8002bbc <HAL_UART_RxCpltCallback>
}
 8003f18:	e007      	b.n	8003f2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	619a      	str	r2, [r3, #24]
}
 8003f2a:	bf00      	nop
 8003f2c:	3770      	adds	r7, #112	; 0x70
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40008000 	.word	0x40008000

08003f38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0ac      	sub	sp, #176	; 0xb0
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f46:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6e:	2b22      	cmp	r3, #34	; 0x22
 8003f70:	f040 8182 	bne.w	8004278 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f7a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f7e:	e125      	b.n	80041cc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003f8e:	b2d9      	uxtb	r1, r3
 8003f90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	400a      	ands	r2, r1
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d053      	beq.n	800407a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <UART_RxISR_8BIT_FIFOEN+0xca>
 8003fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800400e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2202      	movs	r2, #2
 8004020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800403e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2204      	movs	r2, #4
 8004050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f043 0202 	orr.w	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fe fdaf 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 80a2 	bne.w	80041cc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040ac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80040b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80040b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e4      	bne.n	8004088 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80040ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80040e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80040ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80040f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e1      	bne.n	80040be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5f      	ldr	r2, [pc, #380]	; (8004290 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d021      	beq.n	800415c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01a      	beq.n	800415c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800413a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004148:	657b      	str	r3, [r7, #84]	; 0x54
 800414a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800414e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e4      	bne.n	8004126 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d130      	bne.n	80041c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418c:	643b      	str	r3, [r7, #64]	; 0x40
 800418e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e4      	bne.n	800416a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d103      	bne.n	80041b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fb6e 	bl	80008a0 <HAL_UARTEx_RxEventCallback>
 80041c4:	e002      	b.n	80041cc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fcf8 	bl	8002bbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80041d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f47f aecf 	bne.w	8003f80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d049      	beq.n	8004288 <UART_RxISR_8BIT_FIFOEN+0x350>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80041fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80041fe:	429a      	cmp	r2, r3
 8004200:	d242      	bcs.n	8004288 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	61fb      	str	r3, [r7, #28]
   return(result);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800423e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	60bb      	str	r3, [r7, #8]
   return(result);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e4      	bne.n	8004240 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004276:	e007      	b.n	8004288 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]
}
 8004288:	bf00      	nop
 800428a:	37b0      	adds	r7, #176	; 0xb0
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40008000 	.word	0x40008000
 8004294:	08003bc9 	.word	0x08003bc9

08004298 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b0ae      	sub	sp, #184	; 0xb8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	f040 8186 	bne.w	80045e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042de:	e129      	b.n	8004534 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80042f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80042f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004302:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800432a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d053      	beq.n	80043de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2202      	movs	r2, #2
 8004384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f043 0204 	orr.w	r2, r3, #4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80043a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2204      	movs	r2, #4
 80043b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f043 0202 	orr.w	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe fbfd 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 80a4 	bne.w	8004534 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800440e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004412:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e2      	bne.n	80043ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800444e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004450:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800445c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e1      	bne.n	8004426 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5f      	ldr	r2, [pc, #380]	; (80045f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d021      	beq.n	80044c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01a      	beq.n	80044c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e4      	bne.n	800448e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d130      	bne.n	800452e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
 80044f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e4      	bne.n	80044d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d103      	bne.n	800451e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2210      	movs	r2, #16
 800451c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc f9ba 	bl	80008a0 <HAL_UARTEx_RxEventCallback>
 800452c:	e002      	b.n	8004534 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fe fb44 	bl	8002bbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004534:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800453c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f aecb 	bne.w	80042e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004550:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004554:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004558:	2b00      	cmp	r3, #0
 800455a:	d049      	beq.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004562:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004566:	429a      	cmp	r2, r3
 8004568:	d242      	bcs.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	623b      	str	r3, [r7, #32]
   return(result);
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800458e:	633a      	str	r2, [r7, #48]	; 0x30
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e3      	bne.n	800456a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80045a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f043 0320 	orr.w	r3, r3, #32
 80045bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	617b      	str	r3, [r7, #20]
   return(result);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e4      	bne.n	80045a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045de:	e007      	b.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	619a      	str	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	37b8      	adds	r7, #184	; 0xb8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40008000 	.word	0x40008000
 80045fc:	08003d81 	.word	0x08003d81

08004600 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_UARTEx_DisableFifoMode+0x16>
 800464e:	2302      	movs	r3, #2
 8004650:	e027      	b.n	80046a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	; 0x24
 800465e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e02d      	b.n	8004722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2224      	movs	r2, #36	; 0x24
 80046d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8a0 	bl	8004848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800473e:	2302      	movs	r3, #2
 8004740:	e02d      	b.n	800479e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2224      	movs	r2, #36	; 0x24
 800474e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f862 	bl	8004848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b08c      	sub	sp, #48	; 0x30
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	4613      	mov	r3, r2
 80047b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d13b      	bne.n	800483c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e034      	b.n	800483e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7fe fe82 	bl	80034f0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d11d      	bne.n	8004830 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2210      	movs	r2, #16
 80047fa:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	617b      	str	r3, [r7, #20]
   return(result);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f043 0310 	orr.w	r3, r3, #16
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
 800481c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6a39      	ldr	r1, [r7, #32]
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	61fb      	str	r3, [r7, #28]
   return(result);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800482e:	e002      	b.n	8004836 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8004836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800483a:	e000      	b.n	800483e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3730      	adds	r7, #48	; 0x30
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004868:	e031      	b.n	80048ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800486a:	2308      	movs	r3, #8
 800486c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800486e:	2308      	movs	r3, #8
 8004870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	0e5b      	lsrs	r3, r3, #25
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	0f5b      	lsrs	r3, r3, #29
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004892:	7bbb      	ldrb	r3, [r7, #14]
 8004894:	7b3a      	ldrb	r2, [r7, #12]
 8004896:	4911      	ldr	r1, [pc, #68]	; (80048dc <UARTEx_SetNbDataToProcess+0x94>)
 8004898:	5c8a      	ldrb	r2, [r1, r2]
 800489a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800489e:	7b3a      	ldrb	r2, [r7, #12]
 80048a0:	490f      	ldr	r1, [pc, #60]	; (80048e0 <UARTEx_SetNbDataToProcess+0x98>)
 80048a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	7b7a      	ldrb	r2, [r7, #13]
 80048b4:	4909      	ldr	r1, [pc, #36]	; (80048dc <UARTEx_SetNbDataToProcess+0x94>)
 80048b6:	5c8a      	ldrb	r2, [r1, r2]
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048bc:	7b7a      	ldrb	r2, [r7, #13]
 80048be:	4908      	ldr	r1, [pc, #32]	; (80048e0 <UARTEx_SetNbDataToProcess+0x98>)
 80048c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	080049a0 	.word	0x080049a0
 80048e0:	080049a8 	.word	0x080049a8

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <__libc_init_array>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4d0d      	ldr	r5, [pc, #52]	; (800492c <__libc_init_array+0x38>)
 80048f8:	4c0d      	ldr	r4, [pc, #52]	; (8004930 <__libc_init_array+0x3c>)
 80048fa:	1b64      	subs	r4, r4, r5
 80048fc:	10a4      	asrs	r4, r4, #2
 80048fe:	2600      	movs	r6, #0
 8004900:	42a6      	cmp	r6, r4
 8004902:	d109      	bne.n	8004918 <__libc_init_array+0x24>
 8004904:	4d0b      	ldr	r5, [pc, #44]	; (8004934 <__libc_init_array+0x40>)
 8004906:	4c0c      	ldr	r4, [pc, #48]	; (8004938 <__libc_init_array+0x44>)
 8004908:	f000 f826 	bl	8004958 <_init>
 800490c:	1b64      	subs	r4, r4, r5
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	2600      	movs	r6, #0
 8004912:	42a6      	cmp	r6, r4
 8004914:	d105      	bne.n	8004922 <__libc_init_array+0x2e>
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	f855 3b04 	ldr.w	r3, [r5], #4
 800491c:	4798      	blx	r3
 800491e:	3601      	adds	r6, #1
 8004920:	e7ee      	b.n	8004900 <__libc_init_array+0xc>
 8004922:	f855 3b04 	ldr.w	r3, [r5], #4
 8004926:	4798      	blx	r3
 8004928:	3601      	adds	r6, #1
 800492a:	e7f2      	b.n	8004912 <__libc_init_array+0x1e>
 800492c:	080049b8 	.word	0x080049b8
 8004930:	080049b8 	.word	0x080049b8
 8004934:	080049b8 	.word	0x080049b8
 8004938:	080049bc 	.word	0x080049bc

0800493c <memcpy>:
 800493c:	440a      	add	r2, r1
 800493e:	4291      	cmp	r1, r2
 8004940:	f100 33ff 	add.w	r3, r0, #4294967295
 8004944:	d100      	bne.n	8004948 <memcpy+0xc>
 8004946:	4770      	bx	lr
 8004948:	b510      	push	{r4, lr}
 800494a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800494e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004952:	4291      	cmp	r1, r2
 8004954:	d1f9      	bne.n	800494a <memcpy+0xe>
 8004956:	bd10      	pop	{r4, pc}

08004958 <_init>:
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	bf00      	nop
 800495c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495e:	bc08      	pop	{r3}
 8004960:	469e      	mov	lr, r3
 8004962:	4770      	bx	lr

08004964 <_fini>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr
